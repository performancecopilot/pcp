#!/bin/sh
# PCP QA Test No. 1287
# Test pmdaopenmetrics install, "notready" and large initial configs.
# This also exercises pmdaSendError() and the associated python API
# functions which are used by pmdaopenmetrics to tell PMCD that it
# has finished processing the initial config on startup and is now 
# ready to process requests. Also tests the pmdaproc.sh fix for
# $ipc_prot="binary notready".
#
# Copyright (c) 2018 Red Hat.  All Rights Reserved.
#
seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.openmetrics

_pmdaopenmetrics_check || _notrun "openmetrics pmda and/or load generator not installed"
_have_python266 && _notrun "python load generator does not currently work with python 2.6.6"

status=1	# failure is the default!

_cleanup()
{
    cd $here
    _pmdaopenmetrics_cleanup
    $sudo rm -rf $tmp $tmp.*
}

_prepare_pmda openmetrics
trap "_cleanup; exit \$status" 0 1 2 3 15
_stop_auto_restart pmcd

_pmdaopenmetrics_save_config

# add a whopping set of URL configs to exercise the notready stuff
# need to be a place the user $PCP_USER (pmcd) can read
#
file=simple_metric.txt
cp $here/openmetrics/samples/$file $tmp.$file
urlbase=`basename "$file" .txt | tr .- _`
echo 'file://'$tmp.$file >$tmp.tmp
for i in $(seq 1 500)
do
    $sudo cp $tmp.tmp $PCP_PMDAS_DIR/openmetrics/config.d/$urlbase$i.url
done
ls -l $PCP_PMDAS_DIR/openmetrics/config.d >>$seq_full

_pmdaopenmetrics_install

if ! _pmdaopenmetrics_wait_for_metric openmetrics.control.calls
then
    exit
fi

echo; echo === check \"notready\" appeared in pmcd.conf
sed <$PCP_PMCDCONF_PATH >$tmp.tmp \
    -e "s@[ 	]$PCP_PYTHON_PROG[ 	]@ PYTHON_PROG @" \
    -e "s@[ 	]`basename $PCP_PYTHON_PROG`[ 	]@ PYTHON @" \
    # done
if grep 'openmetrics.*notready' $tmp.tmp
then
    :
else
    echo "Oops ... here is $PCP_PMCDCONF_PATH"
    cat $PCP_PMCDCONF_PATH
    exit
fi

## echo === enable verbose log
## pmstore openmetrics.control.debug 1

echo; echo === pminfo listing.
names=`pminfo openmetrics | grep -F -v openmetrics.control | LC_COLLATE=POSIX sort` 2>$tmp.err
if [ -z "$names" ]; then
    echo "FAILED - no openmetrics metrics to show"
else
    if pminfo -dtTf `pminfo openmetrics | grep -F -v openmetrics.control | LC_COLLATE=POSIX sort` > $tmp.info 2>$tmp.err
    then
	:
    else
	echo "... failed! ... here is the Install log ..."
	cat $tmp.out
    fi
    cat $tmp.info $tmp.err
fi

echo == Note: check $seq.full for expected log entries
echo == pmdaopenmetrics LOG == >>$seq_full
cat $PCP_LOG_DIR/pmcd/openmetrics.log >>$seq_full
grep -E 'Ready to process requests|notready' $PCP_LOG_DIR/pmcd/openmetrics.log | \
sed -e 's/\[.*\]/[DATE]/' -e 's/([0-9]*)/(PID)/'

_pmdaopenmetrics_remove

# success, all done
status=0
exit
