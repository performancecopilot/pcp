#!/bin/sh
# PCP QA Test No. 1277
# Check fixes to dbpmda's debug command.
#
# Copyright (c) 2020 Ken McDonell.  All Rights Reserved.
#

if [ $# -eq 0 ]
then
    seq=`basename $0`
    echo "QA output created by $seq"
else
    # use $seq from caller, unless not set
    [ -n "$seq" ] || seq=`basename $0`
    echo "QA output created by `basename $0` $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

if [ "$1" = "--valgrind" ]
then
    _check_valgrind
fi

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter()
{
    tee -a $seq_full \
    | sed \
	-e '/^ *$/d' \
	-e '/^Namespace:/d' \
	-e '/^PMDA:/d' \
	-e '/^Timer:/d' \
	-e '/^Getdesc:/d' \
	-e '/^Dump Instance/d' \
    # end
}

# real QA test starts here
# turn them on in pmdbg -l order
pmdbg -l \
| sed -e 1,2d \
| $PCP_AWK_PROG >$tmp.in '
	{ print "debug " $1
	  print "status"
	}'
# turn then off in reverse pmdbg -l order
pmdbg -l \
| sed -e 1,2d \
| if which tac >/dev/null 2>&1
  then
    tac
  else
    # no tac(1), punt on tail -f (works for OpenBSD)
    tail -r
  fi \
| $PCP_AWK_PROG >>$tmp.in '
	{ print "debug -" $1
	  print "status"
	  all = all " " $1
	}
END	{ print "debug none"		# clear all the flags
	  print "status"
	  print "debug " all		# explicitly set them all
	  print "status"
	  print "debug none"		# clear again
	  print "status"
	  print "debug all"		# implicitly set them all
	  print "status"
	}'

cat $tmp.in >>$seq_full

if [ "$1" = "--valgrind" ]
then
    _run_valgrind dbpmda -ie <$tmp.in
else
    dbpmda -ie <$tmp.in 2>&1
fi \
| _filter

# success, all done
exit
