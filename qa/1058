#!/bin/sh
# PCP QA Test No. 1058
# Basic checkout of the bash PMDA.
#
# Copyright (c) 2016 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -f $PCP_PMDAS_DIR/bash/pmdabash ] || _notrun "Bash script PMDA not installed"

_cleanup()
{
    cd $here
    if $culldir
    then
	_restore_config "$PCP_TMP_DIR/bash"
	$sudo rm -rf $PCP_TMP_DIR/bash.$seq
	culldir=false
    fi
    $sudo rm -rf $tmp $tmp.*
    rm -f $tmp.*
}

status=1	# failure is the default!
culldir=false
trap "_cleanup; exit \$status" 0 1 2 3 15

pmdabash_remove()
{
    echo
    echo "=== remove bash agent ==="
    $sudo ./Remove >$tmp.out 2>&1
    _filter_pmda_remove <$tmp.out
}

pmdabash_install()
{
    # start from known starting points
    if [ -d "$PCP_TMP_DIR/bash" ]
    then
	_save_config "$PCP_TMP_DIR/bash"
	$sudo rm -rf $PCP_TMP_DIR/bash
    fi
    culldir=true
    $sudo mkdir -p -m 775 "$PCP_TMP_DIR/bash"
    $sudo chown $PCP_USER:$PCP_GROUP "$PCP_TMP_DIR/bash"

    cd "$PCP_PMDAS_DIR/bash"
    $sudo ./Remove >/dev/null 2>&1

    echo
    echo "=== bash agent installation ==="
    $sudo ./Install </dev/null >$tmp.out 2>&1
    cat $tmp.out >>$seq_full
    # Check bash metrics have appeared ... X metrics and Y values
    _filter_pmda_install <$tmp.out \
    | sed \
        -e 's/[0-9][0-9]* warnings, //' \
    | $PCP_AWK_PROG '
/Check bash metrics have appeared/    { if ($7 >= 10 && $7 <= 30) $7 = "X"
                                        if ($10 >= 0 && $10 <= 80) $10 = "Y"
                                      }
                                      { print }'
}

_prepare_pmda bash
# note: _restore_auto_restart pmcd done in _cleanup_pmda()
trap "_cleanup_pmda bash; exit \$status" 0 1 2 3 15

_stop_auto_restart pmcd

# real QA test starts here
pmdabash_install

# pmcd should have been started by the Install process - check
if pminfo -v bash > $tmp.info 2> $tmp.err
then
    :
else
    echo "... failed! ... here is the Install log ..."
    cat $tmp.out
fi
cat $tmp.info $tmp.err

pmdabash_remove
status=0
exit
