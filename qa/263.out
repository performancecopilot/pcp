QA output created by 263
=== expression trees and pmDesc propagation ===

aggr.max32 = max(sample.bin)
aggr.min32 = min(sample.long.hundred)
aggr.maxu32_minu32 = max(sample.const_rate.value) - min(sample.const_rate.value)
aggr.max64_min64 = max(sample.longlong.hundred) - min(sample.longlong.hundred)
aggr.maxu64_minu64 = max(sample.pdu) - min(sample.pdu)
aggr.maxuf_minuf = max(sample.float.million) - min(sample.float.million)
aggr.maxud_minud = max(sample.double.million) - min(sample.double.million)
aggr.count32 = count(sample.bin)
aggr.avg32 = avg(sample.bin)
aggr.max32_x = max(sample.bin)
aggr.min32_x = min(sample.bin)
aggr.sum32 = sum(sample.bin)
aggr.avgu32 = avg(sample.ulong.bin_ctr)
aggr.countu32 = count(sample.ulong.bin_ctr)
aggr.maxu32 = max(sample.ulong.bin_ctr)
aggr.minu32 = min(sample.ulong.bin_ctr)
aggr.sumu32 = sum(sample.ulong.bin_ctr)
aggr.avgf = avg(sample.float.bin)
aggr.countf = count(sample.float.bin)
aggr.maxf = max(sample.float.bin)
aggr.minf = min(sample.float.bin)
aggr.sumf = sum(sample.float.bin)
aggr.avg64 = avg(sample.longlong.bin_ctr)
aggr.count64 = count(sample.longlong.bin_ctr)
aggr.max64 = max(sample.longlong.bin_ctr)
aggr.min64 = min(sample.longlong.bin_ctr)
aggr.sum64 = sum(sample.longlong.bin_ctr)
aggr.seconds = sample.seconds
aggr.avgu64 = avg(sample.ulonglong.bin_ctr)
aggr.countu64 = count(sample.ulonglong.bin_ctr)
aggr.maxu64 = max(sample.ulonglong.bin_ctr)
aggr.minu64 = min(sample.ulonglong.bin_ctr)
aggr.sumu64 = sum(sample.ulonglong.bin_ctr)
aggr.avgd = avg(sample.double.bin)
aggr.countd = count(sample.double.bin)
aggr.maxd = max(sample.double.bin)
aggr.mind = min(sample.double.bin)
aggr.sumd = sum(sample.double.bin)
aggr.count_err = count(sample.needprofile)
aggr.sum_err = sum(sample.needprofile)
aggr.countblob = count(sample.sysinfo)
aggr.count_noinst = count(sample.noinst)


aggr.max32
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.min32
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.maxu32_minu32
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.max64_min64
    Data Type: 64-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.maxu64_minu64
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.maxuf_minuf
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.maxud_minud
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.count32
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.avg32
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.max32_x
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.min32_x
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.sum32
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.avgu32
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.countu32
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.maxu32
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.minu32
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.sumu32
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: Kbyte

aggr.avgf
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.countf
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.maxf
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.minf
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.sumf
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.avg64
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.count64
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.max64
    Data Type: 64-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.min64
    Data Type: 64-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.sum64
    Data Type: 64-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: Kbyte

aggr.seconds
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: sec

aggr.avgu64
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.countu64
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.maxu64
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.minu64
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: Kbyte

aggr.sumu64
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: Kbyte

aggr.avgd
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.countd
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.maxd
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.mind
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.sumd
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

aggr.count_err
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.sum_err
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none

aggr.countblob
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count

aggr.count_noinst
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count
pmRegisterDerived: name="event.flags" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[0] event.flags = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-0>...
expr node <addr-0> type=ANON left=<addr-1> right=(nil) save_last=0
expr node <addr-1> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
pmRegisterDerived: name="event.missed" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[1] event.missed = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-2>...
expr node <addr-2> type=ANON left=<addr-3> right=(nil) save_last=0
expr node <addr-3> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
Derived metric initialization from $PCP_DERIVED_CONFIG
pmLoadDerivedConfig("TMP.config")
pmRegisterDerived: name="aggr.max32" expr="max(sample.bin)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[2] aggr.max32 = max(sample.bin)
Derived metric expr dump from <addr-4>...
expr node <addr-4> type=MAX left=<addr-5> right=(nil) save_last=0
expr node <addr-5> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="aggr.min32" expr="min(sample.long.hundred)"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[3] aggr.min32 = min(sample.long.hundred)
Derived metric expr dump from <addr-6>...
expr node <addr-6> type=MIN left=<addr-7> right=(nil) save_last=0
expr node <addr-7> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
pmRegisterDerived: name="aggr.maxu32_minu32" expr="max(sample.const_rate.value) - min(sample.const_rate.value)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.const_rate.value"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.const_rate.value"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[4] aggr.maxu32_minu32 = max(sample.const_rate.value) - min(sample.const_rate.value)
Derived metric expr dump from <addr-8>...
expr node <addr-8> type=MINUS left=<addr-9> right=<addr-11> save_last=0
expr node <addr-9> type=MAX left=<addr-10> right=(nil) save_last=0
expr node <addr-10> type=NAME left=(nil) right=(nil) save_last=0 [sample.const_rate.value] primary=1
expr node <addr-11> type=MIN left=<addr-12> right=(nil) save_last=0
expr node <addr-12> type=NAME left=(nil) right=(nil) save_last=0 [sample.const_rate.value] primary=1
pmRegisterDerived: name="aggr.max64_min64" expr="max(sample.longlong.hundred) - min(sample.longlong.hundred)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.longlong.hundred"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.longlong.hundred"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[5] aggr.max64_min64 = max(sample.longlong.hundred) - min(sample.longlong.hundred)
Derived metric expr dump from <addr-13>...
expr node <addr-13> type=MINUS left=<addr-14> right=<addr-16> save_last=0
expr node <addr-14> type=MAX left=<addr-15> right=(nil) save_last=0
expr node <addr-15> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.hundred] primary=1
expr node <addr-16> type=MIN left=<addr-17> right=(nil) save_last=0
expr node <addr-17> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.hundred] primary=1
pmRegisterDerived: name="aggr.maxu64_minu64" expr="max(sample.pdu) - min(sample.pdu)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.pdu"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.pdu"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[6] aggr.maxu64_minu64 = max(sample.pdu) - min(sample.pdu)
Derived metric expr dump from <addr-18>...
expr node <addr-18> type=MINUS left=<addr-19> right=<addr-21> save_last=0
expr node <addr-19> type=MAX left=<addr-20> right=(nil) save_last=0
expr node <addr-20> type=NAME left=(nil) right=(nil) save_last=0 [sample.pdu] primary=1
expr node <addr-21> type=MIN left=<addr-22> right=(nil) save_last=0
expr node <addr-22> type=NAME left=(nil) right=(nil) save_last=0 [sample.pdu] primary=1
pmRegisterDerived: name="aggr.maxuf_minuf" expr="max(sample.float.million) - min(sample.float.million)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.float.million"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.float.million"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[7] aggr.maxuf_minuf = max(sample.float.million) - min(sample.float.million)
Derived metric expr dump from <addr-23>...
expr node <addr-23> type=MINUS left=<addr-24> right=<addr-26> save_last=0
expr node <addr-24> type=MAX left=<addr-25> right=(nil) save_last=0
expr node <addr-25> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.million] primary=1
expr node <addr-26> type=MIN left=<addr-27> right=(nil) save_last=0
expr node <addr-27> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.million] primary=1
pmRegisterDerived: name="aggr.maxud_minud" expr="max(sample.double.million) - min(sample.double.million)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[8] aggr.maxud_minud = max(sample.double.million) - min(sample.double.million)
Derived metric expr dump from <addr-28>...
expr node <addr-28> type=MINUS left=<addr-29> right=<addr-31> save_last=0
expr node <addr-29> type=MAX left=<addr-30> right=(nil) save_last=0
expr node <addr-30> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-31> type=MIN left=<addr-32> right=(nil) save_last=0
expr node <addr-32> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
pmRegisterDerived: name="aggr.count32" expr="count(sample.bin)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[9] aggr.count32 = count(sample.bin)
Derived metric expr dump from <addr-33>...
expr node <addr-33> type=COUNT left=<addr-34> right=(nil) save_last=0
expr node <addr-34> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="aggr.avg32" expr="avg(sample.bin)"
derive_lex() -> type=L_AVG "avg"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[10] aggr.avg32 = avg(sample.bin)
Derived metric expr dump from <addr-35>...
expr node <addr-35> type=AVG left=<addr-36> right=(nil) save_last=0
expr node <addr-36> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="aggr.max32_x" expr="max(sample.bin)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[11] aggr.max32_x = max(sample.bin)
Derived metric expr dump from <addr-37>...
expr node <addr-37> type=MAX left=<addr-38> right=(nil) save_last=0
expr node <addr-38> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="aggr.min32_x" expr="min(sample.bin)"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[12] aggr.min32_x = min(sample.bin)
Derived metric expr dump from <addr-39>...
expr node <addr-39> type=MIN left=<addr-40> right=(nil) save_last=0
expr node <addr-40> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="aggr.sum32" expr="sum(sample.bin)"
derive_lex() -> type=L_SUM "sum"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[13] aggr.sum32 = sum(sample.bin)
Derived metric expr dump from <addr-41>...
expr node <addr-41> type=SUM left=<addr-42> right=(nil) save_last=0
expr node <addr-42> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="aggr.avgu32" expr="avg(sample.ulong.bin_ctr)"
derive_lex() -> type=L_AVG "avg"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[14] aggr.avgu32 = avg(sample.ulong.bin_ctr)
Derived metric expr dump from <addr-43>...
expr node <addr-43> type=AVG left=<addr-44> right=(nil) save_last=0
expr node <addr-44> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.countu32" expr="count(sample.ulong.bin_ctr)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[15] aggr.countu32 = count(sample.ulong.bin_ctr)
Derived metric expr dump from <addr-45>...
expr node <addr-45> type=COUNT left=<addr-46> right=(nil) save_last=0
expr node <addr-46> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.maxu32" expr="max(sample.ulong.bin_ctr)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[16] aggr.maxu32 = max(sample.ulong.bin_ctr)
Derived metric expr dump from <addr-47>...
expr node <addr-47> type=MAX left=<addr-48> right=(nil) save_last=0
expr node <addr-48> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.minu32" expr="min(sample.ulong.bin_ctr)"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[17] aggr.minu32 = min(sample.ulong.bin_ctr)
Derived metric expr dump from <addr-49>...
expr node <addr-49> type=MIN left=<addr-50> right=(nil) save_last=0
expr node <addr-50> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.sumu32" expr="sum(sample.ulong.bin_ctr)"
derive_lex() -> type=L_SUM "sum"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[18] aggr.sumu32 = sum(sample.ulong.bin_ctr)
Derived metric expr dump from <addr-51>...
expr node <addr-51> type=SUM left=<addr-52> right=(nil) save_last=0
expr node <addr-52> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.avgf" expr="avg(sample.float.bin)"
derive_lex() -> type=L_AVG "avg"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.float.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[19] aggr.avgf = avg(sample.float.bin)
Derived metric expr dump from <addr-53>...
expr node <addr-53> type=AVG left=<addr-54> right=(nil) save_last=0
expr node <addr-54> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.bin] primary=1
pmRegisterDerived: name="aggr.countf" expr="count(sample.float.bin)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.float.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[20] aggr.countf = count(sample.float.bin)
Derived metric expr dump from <addr-55>...
expr node <addr-55> type=COUNT left=<addr-56> right=(nil) save_last=0
expr node <addr-56> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.bin] primary=1
pmRegisterDerived: name="aggr.maxf" expr="max(sample.float.bin)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.float.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[21] aggr.maxf = max(sample.float.bin)
Derived metric expr dump from <addr-57>...
expr node <addr-57> type=MAX left=<addr-58> right=(nil) save_last=0
expr node <addr-58> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.bin] primary=1
pmRegisterDerived: name="aggr.minf" expr="min(sample.float.bin)"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.float.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[22] aggr.minf = min(sample.float.bin)
Derived metric expr dump from <addr-59>...
expr node <addr-59> type=MIN left=<addr-60> right=(nil) save_last=0
expr node <addr-60> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.bin] primary=1
pmRegisterDerived: name="aggr.sumf" expr="sum(sample.float.bin)"
derive_lex() -> type=L_SUM "sum"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.float.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[23] aggr.sumf = sum(sample.float.bin)
Derived metric expr dump from <addr-61>...
expr node <addr-61> type=SUM left=<addr-62> right=(nil) save_last=0
expr node <addr-62> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.bin] primary=1
pmRegisterDerived: name="aggr.avg64" expr="avg(sample.longlong.bin_ctr)"
derive_lex() -> type=L_AVG "avg"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.longlong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[24] aggr.avg64 = avg(sample.longlong.bin_ctr)
Derived metric expr dump from <addr-63>...
expr node <addr-63> type=AVG left=<addr-64> right=(nil) save_last=0
expr node <addr-64> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.count64" expr="count(sample.longlong.bin_ctr)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.longlong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[25] aggr.count64 = count(sample.longlong.bin_ctr)
Derived metric expr dump from <addr-65>...
expr node <addr-65> type=COUNT left=<addr-66> right=(nil) save_last=0
expr node <addr-66> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.max64" expr="max(sample.longlong.bin_ctr)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.longlong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[26] aggr.max64 = max(sample.longlong.bin_ctr)
Derived metric expr dump from <addr-67>...
expr node <addr-67> type=MAX left=<addr-68> right=(nil) save_last=0
expr node <addr-68> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.min64" expr="min(sample.longlong.bin_ctr)"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.longlong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[27] aggr.min64 = min(sample.longlong.bin_ctr)
Derived metric expr dump from <addr-69>...
expr node <addr-69> type=MIN left=<addr-70> right=(nil) save_last=0
expr node <addr-70> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.sum64" expr="sum(sample.longlong.bin_ctr)"
derive_lex() -> type=L_SUM "sum"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.longlong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[28] aggr.sum64 = sum(sample.longlong.bin_ctr)
Derived metric expr dump from <addr-71>...
expr node <addr-71> type=SUM left=<addr-72> right=(nil) save_last=0
expr node <addr-72> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.seconds" expr="sample.seconds"
derive_lex() -> type=L_NAME "sample.seconds"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[29] aggr.seconds = sample.seconds
Derived metric expr dump from <addr-73>...
expr node <addr-73> type=NAME left=(nil) right=(nil) save_last=0 [sample.seconds] primary=1
pmRegisterDerived: name="aggr.avgu64" expr="avg(sample.ulonglong.bin_ctr)"
derive_lex() -> type=L_AVG "avg"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulonglong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[30] aggr.avgu64 = avg(sample.ulonglong.bin_ctr)
Derived metric expr dump from <addr-74>...
expr node <addr-74> type=AVG left=<addr-75> right=(nil) save_last=0
expr node <addr-75> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.countu64" expr="count(sample.ulonglong.bin_ctr)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulonglong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[31] aggr.countu64 = count(sample.ulonglong.bin_ctr)
Derived metric expr dump from <addr-76>...
expr node <addr-76> type=COUNT left=<addr-77> right=(nil) save_last=0
expr node <addr-77> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.maxu64" expr="max(sample.ulonglong.bin_ctr)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulonglong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[32] aggr.maxu64 = max(sample.ulonglong.bin_ctr)
Derived metric expr dump from <addr-78>...
expr node <addr-78> type=MAX left=<addr-79> right=(nil) save_last=0
expr node <addr-79> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.minu64" expr="min(sample.ulonglong.bin_ctr)"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulonglong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[33] aggr.minu64 = min(sample.ulonglong.bin_ctr)
Derived metric expr dump from <addr-80>...
expr node <addr-80> type=MIN left=<addr-81> right=(nil) save_last=0
expr node <addr-81> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.sumu64" expr="sum(sample.ulonglong.bin_ctr)"
derive_lex() -> type=L_SUM "sum"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulonglong.bin_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[34] aggr.sumu64 = sum(sample.ulonglong.bin_ctr)
Derived metric expr dump from <addr-82>...
expr node <addr-82> type=SUM left=<addr-83> right=(nil) save_last=0
expr node <addr-83> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.bin_ctr] primary=1
pmRegisterDerived: name="aggr.avgd" expr="avg(sample.double.bin)"
derive_lex() -> type=L_AVG "avg"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[35] aggr.avgd = avg(sample.double.bin)
Derived metric expr dump from <addr-84>...
expr node <addr-84> type=AVG left=<addr-85> right=(nil) save_last=0
expr node <addr-85> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.bin] primary=1
pmRegisterDerived: name="aggr.countd" expr="count(sample.double.bin)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[36] aggr.countd = count(sample.double.bin)
Derived metric expr dump from <addr-86>...
expr node <addr-86> type=COUNT left=<addr-87> right=(nil) save_last=0
expr node <addr-87> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.bin] primary=1
pmRegisterDerived: name="aggr.maxd" expr="max(sample.double.bin)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[37] aggr.maxd = max(sample.double.bin)
Derived metric expr dump from <addr-88>...
expr node <addr-88> type=MAX left=<addr-89> right=(nil) save_last=0
expr node <addr-89> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.bin] primary=1
pmRegisterDerived: name="aggr.mind" expr="min(sample.double.bin)"
derive_lex() -> type=L_MIN "min"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[38] aggr.mind = min(sample.double.bin)
Derived metric expr dump from <addr-90>...
expr node <addr-90> type=MIN left=<addr-91> right=(nil) save_last=0
expr node <addr-91> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.bin] primary=1
pmRegisterDerived: name="aggr.sumd" expr="sum(sample.double.bin)"
derive_lex() -> type=L_SUM "sum"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.bin"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[39] aggr.sumd = sum(sample.double.bin)
Derived metric expr dump from <addr-92>...
expr node <addr-92> type=SUM left=<addr-93> right=(nil) save_last=0
expr node <addr-93> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.bin] primary=1
pmRegisterDerived: name="aggr.count_err" expr="count(sample.needprofile)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.needprofile"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[40] aggr.count_err = count(sample.needprofile)
Derived metric expr dump from <addr-94>...
expr node <addr-94> type=COUNT left=<addr-95> right=(nil) save_last=0
expr node <addr-95> type=NAME left=(nil) right=(nil) save_last=0 [sample.needprofile] primary=1
pmRegisterDerived: name="aggr.sum_err" expr="sum(sample.needprofile)"
derive_lex() -> type=L_SUM "sum"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.needprofile"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[41] aggr.sum_err = sum(sample.needprofile)
Derived metric expr dump from <addr-96>...
expr node <addr-96> type=SUM left=<addr-97> right=(nil) save_last=0
expr node <addr-97> type=NAME left=(nil) right=(nil) save_last=0 [sample.needprofile] primary=1
pmRegisterDerived: name="aggr.countblob" expr="count(sample.sysinfo)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.sysinfo"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[42] aggr.countblob = count(sample.sysinfo)
Derived metric expr dump from <addr-98>...
expr node <addr-98> type=COUNT left=<addr-99> right=(nil) save_last=0
expr node <addr-99> type=NAME left=(nil) right=(nil) save_last=0 [sample.sysinfo] primary=1
pmRegisterDerived: name="aggr.count_noinst" expr="count(sample.noinst)"
derive_lex() -> type=L_COUNT "count"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.noinst"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[43] aggr.count_noinst = count(sample.noinst)
Derived metric expr dump from <addr-100>...
expr node <addr-100> type=COUNT left=<addr-101> right=(nil) save_last=0
expr node <addr-101> type=NAME left=(nil) right=(nil) save_last=0 [sample.noinst] primary=1
__dmopencontext(->ctx 0) called, 44 derived metrics
__dmgetpmid: metric "aggr.max32" -> PMID 511.0.3
__dmtraverse: name="aggr" added "aggr.max32"
__dmgetpmid: metric "aggr.min32" -> PMID 511.0.4
__dmtraverse: name="aggr" added "aggr.min32"
__dmgetpmid: metric "aggr.maxu32_minu32" -> PMID 511.0.5
__dmtraverse: name="aggr" added "aggr.maxu32_minu32"
__dmgetpmid: metric "aggr.max64_min64" -> PMID 511.0.6
__dmtraverse: name="aggr" added "aggr.max64_min64"
__dmgetpmid: metric "aggr.maxu64_minu64" -> PMID 511.0.7
__dmtraverse: name="aggr" added "aggr.maxu64_minu64"
__dmgetpmid: metric "aggr.maxuf_minuf" -> PMID 511.0.8
__dmtraverse: name="aggr" added "aggr.maxuf_minuf"
__dmgetpmid: metric "aggr.maxud_minud" -> PMID 511.0.9
__dmtraverse: name="aggr" added "aggr.maxud_minud"
__dmgetpmid: metric "aggr.count32" -> PMID 511.0.10
__dmtraverse: name="aggr" added "aggr.count32"
__dmgetpmid: metric "aggr.avg32" -> PMID 511.0.11
__dmtraverse: name="aggr" added "aggr.avg32"
__dmgetpmid: metric "aggr.max32_x" -> PMID 511.0.12
__dmtraverse: name="aggr" added "aggr.max32_x"
__dmgetpmid: metric "aggr.min32_x" -> PMID 511.0.13
__dmtraverse: name="aggr" added "aggr.min32_x"
__dmgetpmid: metric "aggr.sum32" -> PMID 511.0.14
__dmtraverse: name="aggr" added "aggr.sum32"
__dmgetpmid: metric "aggr.avgu32" -> PMID 511.0.15
__dmtraverse: name="aggr" added "aggr.avgu32"
__dmgetpmid: metric "aggr.countu32" -> PMID 511.0.16
__dmtraverse: name="aggr" added "aggr.countu32"
__dmgetpmid: metric "aggr.maxu32" -> PMID 511.0.17
__dmtraverse: name="aggr" added "aggr.maxu32"
__dmgetpmid: metric "aggr.minu32" -> PMID 511.0.18
__dmtraverse: name="aggr" added "aggr.minu32"
__dmgetpmid: metric "aggr.sumu32" -> PMID 511.0.19
__dmtraverse: name="aggr" added "aggr.sumu32"
__dmgetpmid: metric "aggr.avgf" -> PMID 511.0.20
__dmtraverse: name="aggr" added "aggr.avgf"
__dmgetpmid: metric "aggr.countf" -> PMID 511.0.21
__dmtraverse: name="aggr" added "aggr.countf"
__dmgetpmid: metric "aggr.maxf" -> PMID 511.0.22
__dmtraverse: name="aggr" added "aggr.maxf"
__dmgetpmid: metric "aggr.minf" -> PMID 511.0.23
__dmtraverse: name="aggr" added "aggr.minf"
__dmgetpmid: metric "aggr.sumf" -> PMID 511.0.24
__dmtraverse: name="aggr" added "aggr.sumf"
__dmgetpmid: metric "aggr.avg64" -> PMID 511.0.25
__dmtraverse: name="aggr" added "aggr.avg64"
__dmgetpmid: metric "aggr.count64" -> PMID 511.0.26
__dmtraverse: name="aggr" added "aggr.count64"
__dmgetpmid: metric "aggr.max64" -> PMID 511.0.27
__dmtraverse: name="aggr" added "aggr.max64"
__dmgetpmid: metric "aggr.min64" -> PMID 511.0.28
__dmtraverse: name="aggr" added "aggr.min64"
__dmgetpmid: metric "aggr.sum64" -> PMID 511.0.29
__dmtraverse: name="aggr" added "aggr.sum64"
__dmgetpmid: metric "aggr.seconds" -> PMID 511.0.30
__dmtraverse: name="aggr" added "aggr.seconds"
__dmgetpmid: metric "aggr.avgu64" -> PMID 511.0.31
__dmtraverse: name="aggr" added "aggr.avgu64"
__dmgetpmid: metric "aggr.countu64" -> PMID 511.0.32
__dmtraverse: name="aggr" added "aggr.countu64"
__dmgetpmid: metric "aggr.maxu64" -> PMID 511.0.33
__dmtraverse: name="aggr" added "aggr.maxu64"
__dmgetpmid: metric "aggr.minu64" -> PMID 511.0.34
__dmtraverse: name="aggr" added "aggr.minu64"
__dmgetpmid: metric "aggr.sumu64" -> PMID 511.0.35
__dmtraverse: name="aggr" added "aggr.sumu64"
__dmgetpmid: metric "aggr.avgd" -> PMID 511.0.36
__dmtraverse: name="aggr" added "aggr.avgd"
__dmgetpmid: metric "aggr.countd" -> PMID 511.0.37
__dmtraverse: name="aggr" added "aggr.countd"
__dmgetpmid: metric "aggr.maxd" -> PMID 511.0.38
__dmtraverse: name="aggr" added "aggr.maxd"
__dmgetpmid: metric "aggr.mind" -> PMID 511.0.39
__dmtraverse: name="aggr" added "aggr.mind"
__dmgetpmid: metric "aggr.sumd" -> PMID 511.0.40
__dmtraverse: name="aggr" added "aggr.sumd"
__dmgetpmid: metric "aggr.count_err" -> PMID 511.0.41
__dmtraverse: name="aggr" added "aggr.count_err"
__dmgetpmid: metric "aggr.sum_err" -> PMID 511.0.42
__dmtraverse: name="aggr" added "aggr.sum_err"
__dmgetpmid: metric "aggr.countblob" -> PMID 511.0.43
__dmtraverse: name="aggr" added "aggr.countblob"
__dmgetpmid: metric "aggr.count_noinst" -> PMID 511.0.44
__dmtraverse: name="aggr" added "aggr.count_noinst"
__dmgetpmid: metric "aggr.max32" -> PMID 511.0.3
__dmgetpmid: metric "aggr.min32" -> PMID 511.0.4
__dmgetpmid: metric "aggr.maxu32_minu32" -> PMID 511.0.5
__dmgetpmid: metric "aggr.max64_min64" -> PMID 511.0.6
__dmgetpmid: metric "aggr.maxu64_minu64" -> PMID 511.0.7
__dmgetpmid: metric "aggr.maxuf_minuf" -> PMID 511.0.8
__dmgetpmid: metric "aggr.maxud_minud" -> PMID 511.0.9
__dmgetpmid: metric "aggr.count32" -> PMID 511.0.10
__dmgetpmid: metric "aggr.avg32" -> PMID 511.0.11
__dmgetpmid: metric "aggr.max32_x" -> PMID 511.0.12
__dmgetpmid: metric "aggr.min32_x" -> PMID 511.0.13
__dmgetpmid: metric "aggr.sum32" -> PMID 511.0.14
__dmgetpmid: metric "aggr.avgu32" -> PMID 511.0.15
__dmgetpmid: metric "aggr.countu32" -> PMID 511.0.16
__dmgetpmid: metric "aggr.maxu32" -> PMID 511.0.17
__dmgetpmid: metric "aggr.minu32" -> PMID 511.0.18
__dmgetpmid: metric "aggr.sumu32" -> PMID 511.0.19
__dmgetpmid: metric "aggr.avgf" -> PMID 511.0.20
__dmgetpmid: metric "aggr.countf" -> PMID 511.0.21
__dmgetpmid: metric "aggr.maxf" -> PMID 511.0.22
__dmgetpmid: metric "aggr.minf" -> PMID 511.0.23
__dmgetpmid: metric "aggr.sumf" -> PMID 511.0.24
__dmgetpmid: metric "aggr.avg64" -> PMID 511.0.25
__dmgetpmid: metric "aggr.count64" -> PMID 511.0.26
__dmgetpmid: metric "aggr.max64" -> PMID 511.0.27
__dmgetpmid: metric "aggr.min64" -> PMID 511.0.28
__dmgetpmid: metric "aggr.sum64" -> PMID 511.0.29
__dmgetpmid: metric "aggr.seconds" -> PMID 511.0.30
__dmgetpmid: metric "aggr.avgu64" -> PMID 511.0.31
__dmgetpmid: metric "aggr.countu64" -> PMID 511.0.32
__dmgetpmid: metric "aggr.maxu64" -> PMID 511.0.33
__dmgetpmid: metric "aggr.minu64" -> PMID 511.0.34
__dmgetpmid: metric "aggr.sumu64" -> PMID 511.0.35
__dmgetpmid: metric "aggr.avgd" -> PMID 511.0.36
__dmgetpmid: metric "aggr.countd" -> PMID 511.0.37
__dmgetpmid: metric "aggr.maxd" -> PMID 511.0.38
__dmgetpmid: metric "aggr.mind" -> PMID 511.0.39
__dmgetpmid: metric "aggr.sumd" -> PMID 511.0.40
__dmgetpmid: metric "aggr.count_err" -> PMID 511.0.41
__dmgetpmid: metric "aggr.sum_err" -> PMID 511.0.42
__dmgetpmid: metric "aggr.countblob" -> PMID 511.0.43
__dmgetpmid: metric "aggr.count_noinst" -> PMID 511.0.44

=== fetch values exercises ===


aggr.max32
    value 900

aggr.min32
    value 100

aggr.maxu32_minu32
    value 0

aggr.max64_min64
    value 0

aggr.maxu64_minu64
    value 0

aggr.maxuf_minuf
    value 0

aggr.maxud_minud
    value 0

aggr.count32
    value 9

aggr.avg32
    value 500

aggr.max32_x
    value 900

aggr.min32_x
    value 100

aggr.sum32
    value 4500

aggr.avgu32
    value 500

aggr.countu32
    value 9

aggr.maxu32
    value 900

aggr.minu32
    value 100

aggr.sumu32
    value 4500

aggr.avgf
    value 500

aggr.countf
    value 9

aggr.maxf
    value 900

aggr.minf
    value 100

aggr.sumf
    value 4500

aggr.avg64
    value 500

aggr.count64
    value 9

aggr.max64
    value 900

aggr.min64
    value 100

aggr.sum64
    value 4500

aggr.seconds
value OK

aggr.avgu64
value OK

aggr.countu64
    value 9

aggr.maxu64
value OK

aggr.minu64
value OK

aggr.sumu64
value OK

aggr.avgd
    value 500

aggr.countd
    value 9

aggr.maxd
    value 900

aggr.mind
    value 100

aggr.sumd
    value 4500

aggr.count_err
    value 0

aggr.sum_err
Error: Explicit instance identifier(s) required

aggr.countblob
    value 1

aggr.count_noinst
    value 0

=== semantic errors ===

aggr.non_arith = max(sample.lights)

pmRegisterDerived: name="event.flags" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[0] event.flags = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-0>...
expr node <addr-0> type=ANON left=<addr-1> right=(nil) save_last=0
expr node <addr-1> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
pmRegisterDerived: name="event.missed" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[1] event.missed = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-2>...
expr node <addr-2> type=ANON left=<addr-3> right=(nil) save_last=0
expr node <addr-3> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
Derived metric initialization from $PCP_DERIVED_CONFIG
pmLoadDerivedConfig("TMP.config")
pmRegisterDerived: name="aggr.non_arith" expr="max(sample.lights)"
derive_lex() -> type=L_MAX "max"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.lights"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[2] aggr.non_arith = max(sample.lights)
Derived metric expr dump from <addr-4>...
expr node <addr-4> type=MAX left=<addr-5> right=(nil) save_last=0
expr node <addr-5> type=NAME left=(nil) right=(nil) save_last=0 [sample.lights] primary=1
__dmopencontext(->ctx 0) called, 3 derived metrics
__dmgetpmid: metric "aggr.non_arith" -> PMID 511.0.3
Semantic error: derived metric aggr.non_arith: MAX(sample.lights): Non-arithmetic operand for function
__dmbind: check_expr failed for metric[2] aggr.non_arith
Derived metric expr dump from <addr-6>...
expr node <addr-6> type=MAX left=<addr-7> right=(nil) save_last=0
    PMID: PM_ID_NULL (29.0.46 from pmDesc) numval: 0
    Data Type: string  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
expr node <addr-7> type=NAME left=(nil) right=(nil) save_last=0 [sample.lights] primary=0
    PMID: 29.0.46 (29.0.46 from pmDesc) numval: 0
    Data Type: string  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
__dmtraverse: name="aggr", omitting invalid child aggr.non_arith [511.0.3]
Error: aggr: Unknown metric name
