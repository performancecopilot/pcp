#!/bin/sh
# PCP QA Test No. 1117
# Exercise the BCC PMDA biolatency module - install, remove and values.
#
# Copyright (c) 2018 Andreas Gerstmayr.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.bcc

_pmdabcc_check
_bcc_check_ArgString || _notrun "bcc is broken (ArgString bug) on this platform"

# the biolatency BCC module uses kprobes that might attach to kernel symbols
# that are not present ... add to the list below as required
#
for symbol in blk_account_io_start
do
    grep " T $symbol\$" /proc/kallsyms >/dev/null || _notrun "kernel does not contain required $symbol symbol"
done

status=1       # failure is the default!
signal=$PCP_BINADM_DIR/pmsignal

write_size=`expr 20 \* 1024 \* 1024` # number of bytes to write into testfile
out_file="$PCP_TMPFILE_DIR/pcp-qa-$seq" # block device required here (no tmpfs)

_label_filter()
{
    grep '"0-1"' | grep '"statistic":"histogram"' | grep '"lower_bound":0' | grep 'upper_bound":1' > /dev/null && echo 'OK'
}

_cleanup()
{
    _pmdabcc_cleanup
    $sudo rm -f "$out_file"
}

cat <<EOF >$tmp.conf
# Installed by PCP QA test $seq on `date`
[pmda]
modules = biolatency
prefix = bcc.
[biolatency]
module = biolatency
cluster = 0
EOF

_pmdabcc_try_compile $tmp.conf

_prepare_pmda bcc
trap "_cleanup; exit \$status" 0 1 2 3 15
_stop_auto_restart pmcd

# real QA test starts here
_pmdabcc_install <$tmp.conf
_pmdabcc_wait_for_metric

# Generate system activity for the BCC biolatency module
dd if=/dev/zero of=${out_file} bs=${write_size} count=1 oflag=direct 2>$seq_full

echo "=== report metric values ==="
pminfo -dfmtT bcc.disk.all.latency 2>&1 | tee -a $seq_full \
| _instances_filter_nonzero

echo "=== check metric labels ==="
pminfo -l bcc.disk.all.latency 2>&1 | tee -a $seq_full \
| _label_filter

_pmdabcc_remove

status=0
exit
