#!/bin/sh
# PCP QA Test No. 756
# Run the test harness for perfevent code.
#
# The test harness is designed to check the correct function of the
# internal perfevent function calls.
#
# Copyright (c) 2014 Joe White
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -f $PCP_INC_DIR/builddefs ] || _notrun "No $PCP_INC_DIR/builddefs"
grep 'PMDA_PERFEVENT[ 	]*=[ 	]*true' $PCP_INC_DIR/builddefs >/dev/null 2>&1 || _notrun "PMDA_PERFEVENT is not true in builddefs"

# some output is dependent on directory order in the filesystem, e.g.
# PMU name : pmu1
#	event name : bar
#	event name : foo
# need to divert this and sort it before output.
#
_filter()
{
    ( sed -e 's/^ ===/===/' ; echo "===== END ====") \
    | $PCP_AWK_PROG '
BEGIN		{ divert = 0; ndiv = 0 }
/^===== END ====/	{ next }
divert == 0	{ print }
divert > 0 && /^[ 	]/	{ # line beginning with whitespace continues
				  # the diversion
				  print $0 >"'$tmp.sort'." ndiv
				  divert++
				  next
				}
divert > 0	{ # end of diversion
		  if (divert > 1) {
		      # at least one line diverted
		      system("LC_COLLATE=POSIX sort '$tmp.sort'." ndiv)
		  }
		  divert = 0
		  print
		}
/^PMU name/	{ divert = 1; ndiv++; next }'
}

status=1	# failure is the default
trap "cd $here; rm -f $tmp.*; exit \$status" 0 1 2 3 15
cd perfevent

if [ -f perf_event_test.c ]
then
    # we're in the git tree, rebuild the binary to be sure, to be sure ...
    # but perfevent_test includes .o files from the perfevent PMDAs dir,
    # so need to make over there first
    #
    cd $here/../src/pmdas/perfevent
    if $PCP_MAKE_PROG clean default >>$seq_full 2>&1
    then
	:
    else
	echo "Arrg, failed to rebuild perfevent PMDA ... see $seq.full"
	exit
    fi
    cd $here/perfevent
    rm -f perfevent_test
    if $PCP_MAKE_PROG clean perfevent_test fakefs >>$seq_full 2>&1
    then
	:
    else
	echo "Arrg, failed to rebuild perfevent/perfevent_test ... see $seq.full"
	exit
    fi
fi

./perfevent_test all 2>/dev/null | _filter
status=$?
if [ "$status" -eq 0 ]
then
    echo "Unit tests Passed"
fi

cd - > /dev/null

exit
