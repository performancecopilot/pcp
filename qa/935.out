QA output created by 935
pmRegisterDerived: name="event.flags" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[0] event.flags = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-0>...
expr node <addr-0> type=ANON left=<addr-1> right=(nil) save_last=0
expr node <addr-1> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
pmRegisterDerived: name="event.missed" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[1] event.missed = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-2>...
expr node <addr-2> type=ANON left=<addr-3> right=(nil) save_last=0
expr node <addr-3> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
Derived metric initialization from $PCP_DERIVED_CONFIG
pmLoadDerivedConfig("TMP.config")
pmRegisterDerived: name="a.m1" expr="sample.long.ten + sample.long.hundred / sample.long.ten"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_SLASH "/"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[2] a.m1 = sample.long.ten + sample.long.hundred / sample.long.ten
Derived metric expr dump from <addr-4>...
expr node <addr-4> type=PLUS left=<addr-5> right=<addr-6> save_last=0
expr node <addr-5> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-6> type=SLASH left=<addr-7> right=<addr-8> save_last=0
expr node <addr-7> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-8> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m2" expr="(sample.long.ten + sample.long.hundred) / sample.long.ten"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_SLASH "/"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[3] a.m2 = (sample.long.ten + sample.long.hundred) / sample.long.ten
Derived metric expr dump from <addr-9>...
expr node <addr-9> type=SLASH left=<addr-10> right=<addr-13> save_last=0
expr node <addr-10> type=PLUS left=<addr-11> right=<addr-12> save_last=0
expr node <addr-11> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-12> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-13> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m3" expr="sample.long.ten * sample.long.ten == sample.long.hundred"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[4] a.m3 = sample.long.ten * sample.long.ten == sample.long.hundred
Derived metric expr dump from <addr-14>...
expr node <addr-14> type=EQ left=<addr-15> right=<addr-18> save_last=0
expr node <addr-15> type=STAR left=<addr-16> right=<addr-17> save_last=0
expr node <addr-16> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-17> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-18> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
pmRegisterDerived: name="a.m4" expr="sample.long.ten * sample.long.ten + sample.long.ten * sample.long.ten"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[5] a.m4 = sample.long.ten * sample.long.ten + sample.long.ten * sample.long.ten
Derived metric expr dump from <addr-19>...
expr node <addr-19> type=PLUS left=<addr-20> right=<addr-23> save_last=0
expr node <addr-20> type=STAR left=<addr-21> right=<addr-22> save_last=0
expr node <addr-21> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-22> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-23> type=STAR left=<addr-24> right=<addr-25> save_last=0
expr node <addr-24> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-25> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m5" expr="sample.long.ten + sample.long.ten == sample.long.ten + sample.long.ten"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[6] a.m5 = sample.long.ten + sample.long.ten == sample.long.ten + sample.long.ten
Derived metric expr dump from <addr-26>...
expr node <addr-26> type=EQ left=<addr-27> right=<addr-30> save_last=0
expr node <addr-27> type=PLUS left=<addr-28> right=<addr-29> save_last=0
expr node <addr-28> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-29> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-30> type=PLUS left=<addr-31> right=<addr-32> save_last=0
expr node <addr-31> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-32> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m6" expr="sample.long.ten + (sample.long.ten >= sample.long.ten) + sample.long.ten"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[7] a.m6 = sample.long.ten + (sample.long.ten >= sample.long.ten) + sample.long.ten
Derived metric expr dump from <addr-33>...
expr node <addr-33> type=PLUS left=<addr-34> right=<addr-39> save_last=0
expr node <addr-34> type=PLUS left=<addr-35> right=<addr-36> save_last=0
expr node <addr-35> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-36> type=GEQ left=<addr-37> right=<addr-38> save_last=0
expr node <addr-37> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-38> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-39> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m7" expr="sample.long.ten * sample.long.ten == sample.long.hundred * sample.long.ten / 10"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_SLASH "/"
derive_lex() -> type=L_INTEGER "10"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[8] a.m7 = sample.long.ten * sample.long.ten == sample.long.hundred * sample.long.ten / 10
Derived metric expr dump from <addr-40>...
expr node <addr-40> type=EQ left=<addr-41> right=<addr-44> save_last=0
expr node <addr-41> type=STAR left=<addr-42> right=<addr-43> save_last=0
expr node <addr-42> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-43> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-44> type=SLASH left=<addr-45> right=<addr-48> save_last=0
expr node <addr-45> type=STAR left=<addr-46> right=<addr-47> save_last=0
expr node <addr-46> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-47> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-48> type=INTEGER left=(nil) right=(nil) save_last=0 [10] primary=1
pmRegisterDerived: name="a.m8" expr="(9 + 1) * sample.long.ten * sample.long.ten == sample.long.hundred * sample.long.ten"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_INTEGER "9"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[9] a.m8 = (9 + 1) * sample.long.ten * sample.long.ten == sample.long.hundred * sample.long.ten
Derived metric expr dump from <addr-49>...
expr node <addr-49> type=EQ left=<addr-50> right=<addr-57> save_last=0
expr node <addr-50> type=STAR left=<addr-51> right=<addr-56> save_last=0
expr node <addr-51> type=STAR left=<addr-52> right=<addr-55> save_last=0
expr node <addr-52> type=PLUS left=<addr-53> right=<addr-54> save_last=0
expr node <addr-53> type=INTEGER left=(nil) right=(nil) save_last=0 [9] primary=1
expr node <addr-54> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-55> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-56> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-57> type=STAR left=<addr-58> right=<addr-59> save_last=0
expr node <addr-58> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-59> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m9" expr="(1 + sample.long.ten) * (sample.long.ten - 1) / (2 * sample.long.ten - 9)"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_SLASH "/"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_INTEGER "2"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_INTEGER "9"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[10] a.m9 = (1 + sample.long.ten) * (sample.long.ten - 1) / (2 * sample.long.ten - 9)
Derived metric expr dump from <addr-60>...
expr node <addr-60> type=SLASH left=<addr-61> right=<addr-68> save_last=0
expr node <addr-61> type=STAR left=<addr-62> right=<addr-65> save_last=0
expr node <addr-62> type=PLUS left=<addr-63> right=<addr-64> save_last=0
expr node <addr-63> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-64> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-65> type=MINUS left=<addr-66> right=<addr-67> save_last=0
expr node <addr-66> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-67> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-68> type=MINUS left=<addr-69> right=<addr-72> save_last=0
expr node <addr-69> type=STAR left=<addr-70> right=<addr-71> save_last=0
expr node <addr-70> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=1
expr node <addr-71> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-72> type=INTEGER left=(nil) right=(nil) save_last=0 [9] primary=1
pmRegisterDerived: name="a.m10" expr="(sample.long.one + sample.long.ten) * (sample.long.ten - sample.long.one)"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[11] a.m10 = (sample.long.one + sample.long.ten) * (sample.long.ten - sample.long.one)
Derived metric expr dump from <addr-73>...
expr node <addr-73> type=STAR left=<addr-74> right=<addr-77> save_last=0
expr node <addr-74> type=PLUS left=<addr-75> right=<addr-76> save_last=0
expr node <addr-75> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-76> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-77> type=MINUS left=<addr-78> right=<addr-79> save_last=0
expr node <addr-78> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-79> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
pmRegisterDerived: name="a.m11" expr="(sample.long.hundred > sample.long.ten)"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[12] a.m11 = (sample.long.hundred > sample.long.ten)
Derived metric expr dump from <addr-80>...
expr node <addr-80> type=GT left=<addr-81> right=<addr-82> save_last=0
expr node <addr-81> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-82> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m12" expr="(sample.long.hundred > sample.long.ten) + (sample.long.ten <= sample.long.ten)"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[13] a.m12 = (sample.long.hundred > sample.long.ten) + (sample.long.ten <= sample.long.ten)
Derived metric expr dump from <addr-83>...
expr node <addr-83> type=PLUS left=<addr-84> right=<addr-87> save_last=0
expr node <addr-84> type=GT left=<addr-85> right=<addr-86> save_last=0
expr node <addr-85> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-86> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-87> type=LEQ left=<addr-88> right=<addr-89> save_last=0
expr node <addr-88> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-89> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m13" expr="(sample.long.hundred > sample.long.ten) + (sample.long.ten <= sample.long.ten) + (sample.long.hundred != 99)"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "99"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[14] a.m13 = (sample.long.hundred > sample.long.ten) + (sample.long.ten <= sample.long.ten) + (sample.long.hundred != 99)
Derived metric expr dump from <addr-90>...
expr node <addr-90> type=PLUS left=<addr-91> right=<addr-98> save_last=0
expr node <addr-91> type=PLUS left=<addr-92> right=<addr-95> save_last=0
expr node <addr-92> type=GT left=<addr-93> right=<addr-94> save_last=0
expr node <addr-93> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-94> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-95> type=LEQ left=<addr-96> right=<addr-97> save_last=0
expr node <addr-96> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-97> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-98> type=NEQ left=<addr-99> right=<addr-100> save_last=0
expr node <addr-99> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-100> type=INTEGER left=(nil) right=(nil) save_last=0 [99] primary=1
pmRegisterDerived: name="a.m14" expr="sample.long.hundred > sample.long.ten == sample.long.one"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[15] a.m14 = sample.long.hundred > sample.long.ten == sample.long.one
Derived metric expr dump from <addr-101>...
expr node <addr-101> type=EQ left=<addr-102> right=<addr-105> save_last=0
expr node <addr-102> type=GT left=<addr-103> right=<addr-104> save_last=0
expr node <addr-103> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-104> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-105> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
pmRegisterDerived: name="a.m15" expr="sample.double.million == 1000000 && sample.long.hundred == 100"
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "1000000"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[16] a.m15 = sample.double.million == 1000000 && sample.long.hundred == 100
Derived metric expr dump from <addr-106>...
expr node <addr-106> type=AND left=<addr-107> right=<addr-110> save_last=0
expr node <addr-107> type=EQ left=<addr-108> right=<addr-109> save_last=0
expr node <addr-108> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-109> type=INTEGER left=(nil) right=(nil) save_last=0 [1000000] primary=1
expr node <addr-110> type=EQ left=<addr-111> right=<addr-112> save_last=0
expr node <addr-111> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-112> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
pmRegisterDerived: name="a.m16" expr="sample.double.million == sample.long.one || sample.long.hundred >= 100"
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[17] a.m16 = sample.double.million == sample.long.one || sample.long.hundred >= 100
Derived metric expr dump from <addr-113>...
expr node <addr-113> type=OR left=<addr-114> right=<addr-117> save_last=0
expr node <addr-114> type=EQ left=<addr-115> right=<addr-116> save_last=0
expr node <addr-115> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-116> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-117> type=GEQ left=<addr-118> right=<addr-119> save_last=0
expr node <addr-118> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-119> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
pmRegisterDerived: name="a.m17" expr="0 + 2 * sample.long.one"
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_INTEGER "2"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[18] a.m17 = 0 + 2 * sample.long.one
Derived metric expr dump from <addr-120>...
expr node <addr-120> type=PLUS left=<addr-121> right=<addr-122> save_last=0
expr node <addr-121> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
expr node <addr-122> type=STAR left=<addr-123> right=<addr-124> save_last=0
expr node <addr-123> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=1
expr node <addr-124> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
pmRegisterDerived: name="a.m18" expr="0 * 2 + sample.long.one"
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_INTEGER "2"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[19] a.m18 = 0 * 2 + sample.long.one
Derived metric expr dump from <addr-125>...
expr node <addr-125> type=PLUS left=<addr-126> right=<addr-129> save_last=0
expr node <addr-126> type=STAR left=<addr-127> right=<addr-128> save_last=0
expr node <addr-127> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
expr node <addr-128> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=1
expr node <addr-129> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
pmRegisterDerived: name="a.m19" expr="123 >= 0 * 2 + sample.long.hundred + sample.float.ten + sample.double.ten"
derive_lex() -> type=L_INTEGER "123"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_INTEGER "2"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.float.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.double.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[20] a.m19 = 123 >= 0 * 2 + sample.long.hundred + sample.float.ten + sample.double.ten
Derived metric expr dump from <addr-130>...
expr node <addr-130> type=GEQ left=<addr-131> right=<addr-132> save_last=0
expr node <addr-131> type=INTEGER left=(nil) right=(nil) save_last=0 [123] primary=1
expr node <addr-132> type=PLUS left=<addr-133> right=<addr-140> save_last=0
expr node <addr-133> type=PLUS left=<addr-134> right=<addr-139> save_last=0
expr node <addr-134> type=PLUS left=<addr-135> right=<addr-138> save_last=0
expr node <addr-135> type=STAR left=<addr-136> right=<addr-137> save_last=0
expr node <addr-136> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
expr node <addr-137> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=1
expr node <addr-138> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-139> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.ten] primary=1
expr node <addr-140> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.ten] primary=1
pmRegisterDerived: name="a.m20" expr="sample.double.million != sample.long.one"
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[21] a.m20 = sample.double.million != sample.long.one
Derived metric expr dump from <addr-141>...
expr node <addr-141> type=NEQ left=<addr-142> right=<addr-143> save_last=0
expr node <addr-142> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-143> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
pmRegisterDerived: name="a.m21" expr="1 >= 0 * 2 + sample.long.one"
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_INTEGER "2"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[22] a.m21 = 1 >= 0 * 2 + sample.long.one
Derived metric expr dump from <addr-144>...
expr node <addr-144> type=GEQ left=<addr-145> right=<addr-146> save_last=0
expr node <addr-145> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-146> type=PLUS left=<addr-147> right=<addr-150> save_last=0
expr node <addr-147> type=STAR left=<addr-148> right=<addr-149> save_last=0
expr node <addr-148> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
expr node <addr-149> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=1
expr node <addr-150> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
pmRegisterDerived: name="a.m22" expr="sample.long.hundred >= 10 * sample.longlong.ten"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "10"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.longlong.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[23] a.m22 = sample.long.hundred >= 10 * sample.longlong.ten
Derived metric expr dump from <addr-151>...
expr node <addr-151> type=GEQ left=<addr-152> right=<addr-153> save_last=0
expr node <addr-152> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-153> type=STAR left=<addr-154> right=<addr-155> save_last=0
expr node <addr-154> type=INTEGER left=(nil) right=(nil) save_last=0 [10] primary=1
expr node <addr-155> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.ten] primary=1
pmRegisterDerived: name="a.m23" expr="sample.ulonglong.hundred <= sample.longlong.ten + 91"
derive_lex() -> type=L_NAME "sample.ulonglong.hundred"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_NAME "sample.longlong.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_INTEGER "91"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[24] a.m23 = sample.ulonglong.hundred <= sample.longlong.ten + 91
Derived metric expr dump from <addr-156>...
expr node <addr-156> type=LEQ left=<addr-157> right=<addr-158> save_last=0
expr node <addr-157> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.hundred] primary=1
expr node <addr-158> type=PLUS left=<addr-159> right=<addr-160> save_last=0
expr node <addr-159> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.ten] primary=1
expr node <addr-160> type=INTEGER left=(nil) right=(nil) save_last=0 [91] primary=1
pmRegisterDerived: name="a.m24" expr="sample.long.hundred >= 10 * sample.longlong.ten && sample.ulonglong.hundred <= sample.longlong.ten + 91"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "10"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.longlong.ten"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.ulonglong.hundred"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_NAME "sample.longlong.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_INTEGER "91"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[25] a.m24 = sample.long.hundred >= 10 * sample.longlong.ten && sample.ulonglong.hundred <= sample.longlong.ten + 91
Derived metric expr dump from <addr-161>...
expr node <addr-161> type=AND left=<addr-162> right=<addr-167> save_last=0
expr node <addr-162> type=GEQ left=<addr-163> right=<addr-164> save_last=0
expr node <addr-163> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-164> type=STAR left=<addr-165> right=<addr-166> save_last=0
expr node <addr-165> type=INTEGER left=(nil) right=(nil) save_last=0 [10] primary=1
expr node <addr-166> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.ten] primary=1
expr node <addr-167> type=LEQ left=<addr-168> right=<addr-169> save_last=0
expr node <addr-168> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.hundred] primary=1
expr node <addr-169> type=PLUS left=<addr-170> right=<addr-171> save_last=0
expr node <addr-170> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.ten] primary=1
expr node <addr-171> type=INTEGER left=(nil) right=(nil) save_last=0 [91] primary=1
pmRegisterDerived: name="a.m25" expr="sample.long.hundred >= 10 && sample.long.hundred == 100 || sample.long.hundred < 101 && sample.long.hundred > 100"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "10"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_INTEGER "101"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[26] a.m25 = sample.long.hundred >= 10 && sample.long.hundred == 100 || sample.long.hundred < 101 && sample.long.hundred > 100
Derived metric expr dump from <addr-172>...
expr node <addr-172> type=AND left=<addr-173> right=<addr-184> save_last=0
expr node <addr-173> type=OR left=<addr-174> right=<addr-181> save_last=0
expr node <addr-174> type=AND left=<addr-175> right=<addr-178> save_last=0
expr node <addr-175> type=GEQ left=<addr-176> right=<addr-177> save_last=0
expr node <addr-176> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-177> type=INTEGER left=(nil) right=(nil) save_last=0 [10] primary=1
expr node <addr-178> type=EQ left=<addr-179> right=<addr-180> save_last=0
expr node <addr-179> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-180> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-181> type=LT left=<addr-182> right=<addr-183> save_last=0
expr node <addr-182> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-183> type=INTEGER left=(nil) right=(nil) save_last=0 [101] primary=1
expr node <addr-184> type=GT left=<addr-185> right=<addr-186> save_last=0
expr node <addr-185> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-186> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
pmRegisterDerived: name="a.m26" expr="((sample.long.hundred >= 10 && sample.long.hundred == 100) || sample.long.hundred < 101) && sample.long.hundred > 100"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "10"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_INTEGER "101"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[27] a.m26 = ((sample.long.hundred >= 10 && sample.long.hundred == 100) || sample.long.hundred < 101) && sample.long.hundred > 100
Derived metric expr dump from <addr-187>...
expr node <addr-187> type=AND left=<addr-188> right=<addr-199> save_last=0
expr node <addr-188> type=OR left=<addr-189> right=<addr-196> save_last=0
expr node <addr-189> type=AND left=<addr-190> right=<addr-193> save_last=0
expr node <addr-190> type=GEQ left=<addr-191> right=<addr-192> save_last=0
expr node <addr-191> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-192> type=INTEGER left=(nil) right=(nil) save_last=0 [10] primary=1
expr node <addr-193> type=EQ left=<addr-194> right=<addr-195> save_last=0
expr node <addr-194> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-195> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-196> type=LT left=<addr-197> right=<addr-198> save_last=0
expr node <addr-197> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-198> type=INTEGER left=(nil) right=(nil) save_last=0 [101] primary=1
expr node <addr-199> type=GT left=<addr-200> right=<addr-201> save_last=0
expr node <addr-200> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-201> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
__dmgetpmid: metric "a.m1" -> PMID 511.0.3
__dmtraverse: name="a" added "a.m1"
__dmgetpmid: metric "a.m2" -> PMID 511.0.4
__dmtraverse: name="a" added "a.m2"
__dmgetpmid: metric "a.m3" -> PMID 511.0.5
__dmtraverse: name="a" added "a.m3"
__dmgetpmid: metric "a.m4" -> PMID 511.0.6
__dmtraverse: name="a" added "a.m4"
__dmgetpmid: metric "a.m5" -> PMID 511.0.7
__dmtraverse: name="a" added "a.m5"
__dmgetpmid: metric "a.m6" -> PMID 511.0.8
__dmtraverse: name="a" added "a.m6"
__dmgetpmid: metric "a.m7" -> PMID 511.0.9
__dmtraverse: name="a" added "a.m7"
__dmgetpmid: metric "a.m8" -> PMID 511.0.10
__dmtraverse: name="a" added "a.m8"
__dmgetpmid: metric "a.m9" -> PMID 511.0.11
__dmtraverse: name="a" added "a.m9"
__dmgetpmid: metric "a.m10" -> PMID 511.0.12
__dmtraverse: name="a" added "a.m10"
__dmgetpmid: metric "a.m11" -> PMID 511.0.13
__dmtraverse: name="a" added "a.m11"
__dmgetpmid: metric "a.m12" -> PMID 511.0.14
__dmtraverse: name="a" added "a.m12"
__dmgetpmid: metric "a.m13" -> PMID 511.0.15
__dmtraverse: name="a" added "a.m13"
__dmgetpmid: metric "a.m14" -> PMID 511.0.16
__dmtraverse: name="a" added "a.m14"
__dmgetpmid: metric "a.m15" -> PMID 511.0.17
__dmtraverse: name="a" added "a.m15"
__dmgetpmid: metric "a.m16" -> PMID 511.0.18
__dmtraverse: name="a" added "a.m16"
__dmgetpmid: metric "a.m17" -> PMID 511.0.19
__dmtraverse: name="a" added "a.m17"
__dmgetpmid: metric "a.m18" -> PMID 511.0.20
__dmtraverse: name="a" added "a.m18"
__dmgetpmid: metric "a.m19" -> PMID 511.0.21
__dmtraverse: name="a" added "a.m19"
__dmgetpmid: metric "a.m20" -> PMID 511.0.22
__dmtraverse: name="a" added "a.m20"
__dmgetpmid: metric "a.m21" -> PMID 511.0.23
__dmtraverse: name="a" added "a.m21"
__dmgetpmid: metric "a.m22" -> PMID 511.0.24
__dmtraverse: name="a" added "a.m22"
__dmgetpmid: metric "a.m23" -> PMID 511.0.25
__dmtraverse: name="a" added "a.m23"
__dmgetpmid: metric "a.m24" -> PMID 511.0.26
__dmtraverse: name="a" added "a.m24"
__dmgetpmid: metric "a.m25" -> PMID 511.0.27
__dmtraverse: name="a" added "a.m25"
__dmgetpmid: metric "a.m26" -> PMID 511.0.28
__dmtraverse: name="a" added "a.m26"
__dmgetpmid: metric "a.m1" -> PMID 511.0.3
__dmgetpmid: metric "a.m2" -> PMID 511.0.4
__dmgetpmid: metric "a.m3" -> PMID 511.0.5
__dmgetpmid: metric "a.m4" -> PMID 511.0.6
__dmgetpmid: metric "a.m5" -> PMID 511.0.7
__dmgetpmid: metric "a.m6" -> PMID 511.0.8
__dmgetpmid: metric "a.m7" -> PMID 511.0.9
__dmgetpmid: metric "a.m8" -> PMID 511.0.10
__dmgetpmid: metric "a.m9" -> PMID 511.0.11
__dmgetpmid: metric "a.m10" -> PMID 511.0.12
__dmgetpmid: metric "a.m11" -> PMID 511.0.13
__dmgetpmid: metric "a.m12" -> PMID 511.0.14
__dmgetpmid: metric "a.m13" -> PMID 511.0.15
__dmgetpmid: metric "a.m14" -> PMID 511.0.16
__dmgetpmid: metric "a.m15" -> PMID 511.0.17
__dmgetpmid: metric "a.m16" -> PMID 511.0.18
__dmgetpmid: metric "a.m17" -> PMID 511.0.19
__dmgetpmid: metric "a.m18" -> PMID 511.0.20
__dmgetpmid: metric "a.m19" -> PMID 511.0.21
__dmgetpmid: metric "a.m20" -> PMID 511.0.22
__dmgetpmid: metric "a.m21" -> PMID 511.0.23
__dmgetpmid: metric "a.m22" -> PMID 511.0.24
__dmgetpmid: metric "a.m23" -> PMID 511.0.25
__dmgetpmid: metric "a.m24" -> PMID 511.0.26
__dmgetpmid: metric "a.m25" -> PMID 511.0.27
__dmgetpmid: metric "a.m26" -> PMID 511.0.28
a.m1 1 20
a.m2 1 11
a.m3 1 1
a.m4 1 200
a.m5 1 1
a.m6 1 21
a.m7 1 1
a.m8 1 1
a.m9 1 9
a.m10 1 99
a.m11 1 1
a.m12 1 2
a.m13 1 3
a.m14 1 1
a.m15 1 1
a.m16 1 1
a.m17 1 2
a.m18 1 1
a.m19 1 1
a.m20 1 1
a.m21 1 1
a.m22 1 1
a.m23 1 1
a.m24 1 1
a.m25 1 0
a.m26 1 0
expecting ...
a.m1	 20
a.m2	 11
a.m3	  1
a.m4	200
a.m5	  1
a.m6	 21
a.m7	  1
a.m8	  1
a.m9	  9
a.m10	 99
a.m11	  1
a.m12	  2
a.m13	  3
a.m14	  1
a.m15	  1
a.m16	  1
a.m17	  2
a.m18	  1
a.m19	  1
a.m20	  1
a.m21	  1
a.m22	  1
a.m23     1
a.m24     1
a.m25     0
a.m26     0
