#!/bin/sh
# PCP QA Test No. 1466
# test migrate_pid_service rc-proc.sh function
#
# Copyright (c) 2021 Red Hat.  All Rights Reserved.
#
seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ "$PCPQA_SYSTEMD" = no ] && _notrun "we're not using systemd here"
[ -n "$PCP_SYSTEMDUNIT_DIR" ] || _notrun "PCP_SYSTEMDUNIT_DIR not set, so no systemd here"
[ -f $PCP_SYSTEMDUNIT_DIR/pmcd.service ] || _notrun "$PCP_SYSTEMDUNIT_DIR/pmcd.service not found"

_cleanup()
{
    cd $here
    # leave pmcd in a known good state
    _service pmcd restart >>$seq_full 2>&1
    _wait_for_pmcd
    $sudo rm -rf $tmp $tmp.*
}

status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

# real QA test starts here
if ! _service pmcd restart 2>&1; then _exit 1; fi >> $seq_full
# in a known clean systemd service state now
_wait_for_pmcd || _exit 1
pmcdpid=`_get_pids_by_name pmcd`

# add a process to the pmcd service cgroup
pmpause >/dev/null 2>&1 &
pid=$!
echo pid=$pid >> $seq_full
echo cgroup=`cat /proc/$pid/cgroup` >> $seq_full
$sudo sh -c ". $PCP_SHARE_DIR/lib/rc-proc.sh; migrate_pid_service -v $pid pmcd.service" 2>&1 >> $seq_full

echo pmsleep >> $seq_full
pmsleep 2
$PCP_PS_PROG $PCP_PS_ALL_FLAGS >> $seq_full
echo new cgroup=`cat /proc/$pid/cgroup` >> $seq_full
echo pmcd cgroup=`cat /proc/$pmcdpid/cgroup` >> $seq_full

if systemctl status pmcd.service 2>&1 | tee $tmp.sts | grep -q -s pmpause
then
    echo PASSED, found pmpause process in pmcd.service cgroup
else
    echo FAILED, did not find pmpause process in pmcd.service cgroup | tee -a $seq_full
    cgroot=`mount | $PCP_AWK_PROG '/^cgroup/ {print $3; exit}'`
    echo cgroot=$cgroot | tee -a $seq_full
    cgslice=`systemctl status pmcd.service | $PCP_AWK_PROG '/CGroup:/ {print $2}'`
    echo cgslice=${cgslice} | tee -a $seq_full
    find ${cgroot} -type d -name pmcd.service -print -exec ls -l {} ";" | tee -a $seq_full
    echo cgroup.procs=${cgslice}/cgroup.procs >> $seq_full
    cat ${cgslice}/cgroup.procs >> $seq_full
    echo systemctl output >> $seq_full
    cat $tmp.sts >> $seq_full
fi

# all done
status=0
exit
