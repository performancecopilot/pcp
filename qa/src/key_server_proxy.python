#!/usr/bin/env pmpython
#
# simple TCP proxy, based on https://stackoverflow.com/a/46422554 (CC BY-SA 3.0)
#

import sys
import time
import argparse
import asyncio


async def pipe(reader, writer, args, local_writer):
    is_local_reader = not writer == local_writer

    try:
        while not reader.at_eof():
            data = await reader.read(2048)
            if not data:
                break

            print(">" if is_local_reader else "<", data)

            # fake loading error (if enabled)
            if (
                is_local_reader
                and args.loading_delay
                and time.time() < args.loading_delay
            ):
                # https://github.com/valkey-io/valkey/blob/unstable/src/server.c#L1789
                data = b"-LOADING Valkey is loading the dataset in memory\r\n"
                print("<", data)
                local_writer.write(data)
            else:
                writer.write(data)
    except Exception:
        pass
    finally:
        writer.close()


async def handle_client(local_reader, local_writer, args):
    remote_host, remote_port = args.remote.split(":")
    try:
        remote_reader, remote_writer = await asyncio.open_connection(
            remote_host, int(remote_port)
        )
        pipe1 = pipe(local_reader, remote_writer, args, local_writer)
        pipe2 = pipe(remote_reader, local_writer, args, local_writer)
        await asyncio.gather(pipe1, pipe2)
    finally:
        local_writer.close()


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--loading_delay", type=int)
    parser.add_argument("local")
    parser.add_argument("remote")
    args = parser.parse_args()

    local_host, local_port = args.local.split(":")
    if args.loading_delay:
        args.loading_delay += time.time()

    server = await asyncio.start_server(
        lambda r, w: handle_client(r, w, args),
        local_host,
        int(local_port),
    )
    if sys.version_info >= (3, 7):
        async with server:
            await server.serve_forever()
    else:
        await server.wait_closed()

if __name__ == '__main__':
    if sys.version_info >= (3, 7):
        asyncio.run(main())
    else:
        event_loop = asyncio.get_event_loop()
        event_loop.run_until_complete(main())
        event_loop.close()
