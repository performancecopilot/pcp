#!/bin/sh
# PCP QA Test No. 1136
# Dynamic indoms test with pmrep, uses the dyninsts archive.
#
# Copyright (c) 1995-2002 Silicon Graphics, Inc.  All Rights Reserved.
# Copyright (c) 2017-2018 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.python

$python -c "from pcp import pmapi" >/dev/null 2>&1
[ $? -eq 0 ] || _notrun "python pcp pmapi module not installed"
$python -c "from collections import OrderedDict" >/dev/null 2>&1
[ $? -eq 0 ] || _notrun "python collections OrderedDict module not installed"

which pmrep >/dev/null 2>&1 || _notrun "pmrep not installed"

status=1        # failure is the default!
hostname=`hostname`
trap "cd $here; _cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    rm -f $tmp.*
}

_msg_filter()
{
    sed \
	-e "s,Recording .* metrics.*,Recording metrics...,g" \
    #end
}


# For OpenBSD and Ubuntu 16.04) there is an odd condition that for one
# sample, one metric is reported as N/A on these platforms rather than an
# integer for a couple of instances ... pmrep has an unusual option (for
# PCP tools) for handling of N/A that avoids interpolation and may be
# subject to arithmetic errors in the sample time calculation (that's a
# guess).
#
# In the absence of any other evidence of a real functional failure here,
# apply the magic of filtering to make the "issue" go away!
#
_odd_filter()
{
    sed \
	-e '/00:00:06/s@N/A        N/A        N/A        N/A@N/A          6        N/A          6@' \
    # end
}

log="--archive $here/archives/dyninsts -z"
metrics="disk.dev.read disk.dev.write mem.util.free mem.util.used"

# real QA test starts here
echo "=== pmrep archive output"
pmrep $log -o archive -F $tmp.archive.a -p -I -r -u $metrics | _msg_filter
pmrep -z -a $tmp.archive.a -p -I -r -u $metrics \
| _odd_filter

echo "=== pmrep archive output - filter"
pmrep $log -o archive -F $tmp.archive.f -p -I -r -u -i '.*sdb.*' -i '.*sdd.*' $metrics | _msg_filter
pmrep -z -a $tmp.archive.f -p -I -r -u $metrics

echo "=== pmrep csv output"
pmrep $log -o csv -p -I -r -u $metrics

echo "=== pmrep csv output - filter"
pmrep $log -o csv -p -I -r -u -i '.*sdb.*' -i '.*sdd.*' $metrics

echo "=== pmrep stdout output"
pmrep $log -o stdout -p -I -r -u $metrics

echo "=== pmrep stdout output - filter"
pmrep $log -o stdout -p -I -r -u -i '.*sdb.*' -i '.*sdd.*' $metrics

echo "=== pmrep colxrow output"
pmrep $log -o stdout -p -I -r -u -X test $metrics

echo "=== pmrep colxrow output - filter"
pmrep $log -o stdout -p -I -r -u -X test -i '.*sdb.*' -i '.*sdd.*' $metrics

# success, all done
status=0
exit
