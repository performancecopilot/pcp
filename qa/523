#!/bin/sh
# PCP QA Test No. 523
# more pmie max_* and min_* tests
#
# Copyright (c) 2013 Ken McDonell.  All Rights Reserved.
#

# get standard filters
. ./common.product
. ./common.filter
. ./common.check

seq=`basename $0`

echo "QA output created by $seq"

status=1	# failure is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

_filter()
{
    sed \
	-e 's/[A-Z][a-z][a-z] [A-Z][a-z][a-z]  *[0-9][0-9]* [0-9][0-9]:[0-9][0-9]:[0-9][0-9]/DATE/' \
	-e 's/DATE [12][0-9][0-9][0-9]/DATE/' \
	-e '/evaluator exiting/s/pmie([0-9][0-9]*)/pmie(PID)/' \
	-e '/Performance Co-Pilot Inference Engine/s/Version .*/Version .../'
}

# mapping to 0x0 -> (nil) needed for C compilers that don't do the
# (nil) translation automatically for a printf %p
#
_filter2()
{
    sed \
	-e 's/0x0\([ (]\)/(nil)\1/g' \
	-e 's/0x0$/(nil)/' \
    | $PCP_AWK_PROG '
$1 == "pmie:"		{ print; next }
/failed: /		{ print; next }
$1 == "bundle:"	{ skip=1 }
skip == 1		{ if ($1 == "Rule:") skip = 0 }
skip == 1		{ next }
			{ print }' >$tmp.tmp
    tr ' =' '\012' <$tmp.tmp \
    | grep '0x' \
    | $PCP_AWK_PROG >$tmp.sed '
BEGIN	{ n = 0 }
    	{ if (seen[$1] == 1) next
	  printf "s/%s/ADDR%03d/\n",$1,n
	  n++
	  seen[$1] = 1
	}'
    sed -f $tmp.sed <$tmp.tmp
}

cat <<'End-of-File' >$tmp.pmie
vm00 = sampledso.colour :vm00;
vm01 = sampledso.colour :vm01;
vm02 = sampledso.colour :vm02;
vm03 = sampledso.colour :vm03;
min_sample sampledso.colour #'red' @0..2 > 0 -> print "min_sample:" " @%h [%i] %v";
min_inst sampledso.colour > 0 -> print "min_inst:" " @%h [%i] %v";
min_host sampledso.colour :vm00 :vm01 :vm02 :vm03 #'red' > 0 -> print "min_host:" " @%h [%i] %v";

max_sample sampledso.colour #'red' @0..2 > 0 -> print "max_sample:" " @%h [%i] %v";
max_inst sampledso.colour > 0 -> print "max_inst:" " @%h [%i] %v";
max_host sampledso.colour :vm00 :vm01 :vm02 :vm03 #'red' > 0 -> print "max_host:" " @%h [%i] %v";
End-of-File

# real QA test starts here
cat <<End-of-File | pmie -v -t 2sec -d -Dappl1 -a archives/multi-vm00 -a archives/multi-vm01 -a archives/multi-vm02 -a archives/multi-vm03 >$tmp.out 2>$tmp.err &
f $tmp.pmie
l
r 10sec
v
End-of-File

wait

# strange but true ... sometimes don't need an echo here to deal
# with the pmie> (and no newline) prompt ...
#
case $PCP_PLATFORM
in
    darwin)
	: no
	;;
    *)
	: yes
	echo >>$tmp.out
    ;;
esac

echo >>$seq_full
echo "pmie PID $!" >>$seq_full
echo >>$seq_full
echo "=== pmie output ===" >>$seq_full
cat $tmp.out >>$seq_full
echo >>$seq_full
echo "=== pmie errors ===" >>$seq_full
cat $tmp.err >>$seq_full

_filter2 <$tmp.err | _filter
_filter <$tmp.out

# success, all done
status=0
exit
