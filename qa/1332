#!/bin/sh
# PCP QA Test No. 1332
# pmdumplog -I/--on-disk-insts
# non-valgrind variant, see qa/1333 for the valgrind variant
#
# Copyright (c) 2021 Ken McDonell.  All Rights Reserved.
#
# check-group-include: pmlogrewrite
#

if [ $# -eq 0 ]
then
    seq=`basename $0`
    echo "QA output created by $seq"
else
    # use $seq from caller, unless not set
    [ -n "$seq" ] || seq=`basename $0`
    echo "QA output created by `basename $0` $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

do_valgrind=false
if [ "$1" = "--valgrind" ]
then
    _check_valgrind
    do_valgrind=true
elif which valgrind >/dev/null 2>&1
then
    [ $PCPQA_VALGRIND = both ] || \
	_notrun "valgrind variant qa/1333 will be run"
fi

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter()
{
    sed \
	-e "s@$tmp@TMP@g" \
    # end
}

# real QA test starts here
pmdumplog -z --insts archives/ok-foo >$tmp.loaded

if $do_valgrind
then
    _run_valgrind pmdumplog -z -I archives/ok-foo 2>&1
else
    pmdumplog -z --on-disk-insts archives/ok-foo 2>&1
fi \
| $PCP_AWK_PROG '
BEGIN		{ state = 1 }
/^=== filtered/	{ state = 0 }
/^=== std out/	{ print; state = 1; next }
/^=== std err/	{ print; next }
state == 0	{ print }
state == 1	{ print >"'$tmp.tmp'" }'
mv $tmp.tmp $tmp.ondisk

export LC_COLLATE=POSIX
sort $tmp.loaded >$tmp.loaded.sort
sort $tmp.ondisk >$tmp.ondisk.sort
diff $tmp.loaded.sort $tmp.ondisk.sort | _filter

# success, all done
exit
