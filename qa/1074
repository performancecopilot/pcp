#!/bin/sh
# PCP QA Test No. 1074
# lock correctness for:
#	__pmMultiThreaded()
#	PM_CONTEXT_LOCAL
#	PM_SCOPE_AF and PM_SCOPE_ACL
#
# See qa/449 for the non-helgrind versions of these tests.
#
# Copyright (c) 2017 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_check_valgrind
_check_helgrind
_get_libpcp_config
$multi_threaded || _notrun "No libpcp threading support"

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter1()
{
    tee -a $seq_full \
    | sed \
	-e 's/Permission denied/No permission to perform requested operation/'
}

_filter2()
{
    $PCP_AWK_PROG '
$7 == "localhost"	{ sub(/^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$/,"IPADDR",$4)
			  sub(/^[0-9a-f:][0-9a-f:]*%[0-9a-z]+$/,"IPADDR",$4)
			  sub(/^[0-9a-f:][0-9a-f:]*$/,"IPADDR",$4)
			  sub(/^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$/,"IPMASK",$5)
			  sub(/^[0-9a-f:][0-9a-f:]*$/,"IPMASK",$5) }
			{ print }' \
    | $PCP_AWK_PROG '!a[$0]++'
}

# real QA test starts here
echo "=== __pmMultiThreaded ===" | tee -a $seq_full
_run_helgrind src/multithread0
if [ -s $tmp.valgrind.err ]
then
    echo "=== stderr ==="
    cat $tmp.valgrind.err
fi
echo "=== stdout ==="
LC_COLLATE=POSIX sort $tmp.valgrind.out

echo | tee -a $seq_full
echo "=== PM_CONTEXT_LOCAL ===" | tee -a $seq_full
_run_helgrind --sudo src/multithread1
if [ -s $tmp.valgrind.err ]
then
    echo "=== stderr ==="
    cat $tmp.valgrind.err
fi
echo "=== stdout ==="
cat $tmp.valgrind.out | _filter1 | LC_COLLATE=POSIX sort

echo | tee -a $seq_full
echo "=== PM_SCOPE_AF and PM_SCOPE_ACL ===" | tee -a $seq_full
_run_helgrind --sudo src/multithread2
if [ -s $tmp.valgrind.err ]
then
    echo "=== stderr ==="
    cat $tmp.valgrind.err
fi
echo "=== stdout ==="
cat $tmp.valgrind.out | _filter2

# success, all done
status=0
exit
