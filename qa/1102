#!/bin/sh
# PCP QA Test No. 1102
# pmdaopenmetrics testing
# specifically testing generic usecase
#
# Note: if anything gets added or changed in qa/openmetrics/samples directory,
# then this test (and all tests in group pmda.openmetrics) will need to be remade.

#
# Copyright (c) 2017 Red Hat.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.openmetrics

_pmdaopenmetrics_check || _notrun "openmetrics pmda and/or load generator not installed"
_have_python266 && _notrun "python load generator does not currently work with python 2.6.6"

status=1	# failure is the default!
totalendpoints=10 #total queue to work through
endpoints=5 #openmetrics endpoints
iterations=5
metrics=10
instances=10
errors=0
delay=0

_cleanup()
{
    if [ -n "$pid" ]
    then
	$sudo $PCP_BINADM_DIR/pmsignal -s TERM $pid >/dev/null 2>&1
	pid=""
    fi

    cd $here
    _pmdaopenmetrics_cleanup
    $sudo rm -rf $tmp $tmp.*
}

_prepare_pmda openmetrics
trap "_cleanup; exit \$status" 0 1 2 3 15
_stop_auto_restart pmcd

_pmdaopenmetrics_save_config
_pmdaopenmetrics_remove \
| sed \
    -e '/ Info: /d' \
    -e 's/not found in Name Space, this is OK/done/' \
# end
_pmdaopenmetrics_install

port=`_find_free_port 10000`
echo "port=$port" >>$seq_full

$python $here/openmetrics/openmetrics_endpoint.python \
	--port=$port \
	--output $PCP_PMDAS_DIR/openmetrics/config.d/ \
	--total $totalendpoints \
	--endpoints $endpoints \
	--metrics $metrics \
	--instances $instances \
	--limit $iterations \
	--delay $delay \
	--error $errors >> $tmp.full 2>&1 &
pid=$!

if ! _pmdaopenmetrics_wait_for_metric openmetrics.source4
then
    status=1
    exit
fi

if pminfo -v `pminfo openmetrics.source0 | LC_COLLATE=POSIX sort` > $tmp.info 2> $tmp.err
then
    :
else
    echo "... failed! ... here is the Install log ..."
    cat $tmp.out
fi
cat $tmp.info $tmp.err

if pminfo -fd `pminfo openmetrics.source1 | LC_COLLATE=POSIX sort` > $tmp.info 2>$tmp.err
   then
    echo "Fetch and desc openmetrics metrics: success"
    cat $tmp.info
else
    echo "Fetch and desc openmetrics metrics: failed"
    cat $tmp.err
fi
sleep 1
for i in 1 2 3
do
    pminfo -f `pminfo openmetrics.source0 | LC_COLLATE=POSIX sort`
    pminfo -f `pminfo openmetrics.source1 | LC_COLLATE=POSIX sort`
done
sleep 1
for i in 1 2 3 4
do
    pminfo -f `pminfo openmetrics.source2 | LC_COLLATE=POSIX sort`
    pminfo -f `pminfo openmetrics.source3 | LC_COLLATE=POSIX sort`
done
sleep 1
for i in 1 2 3 4
do
    pminfo -f `pminfo openmetrics.source4 | LC_COLLATE=POSIX sort`
done

_pmdaopenmetrics_remove \
| sed \
    -e '/ Info: /d' \
# end

# success, all done
status=0
exit
