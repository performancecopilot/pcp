#!/bin/sh
# PCP QA Test No. 1921
# Exercise default option handling for pcp-ss(1).
#
# Copyright (c) 2023 Red Hat.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ $PCP_PLATFORM = linux ] || _notrun "Linux-specific sockets testing"
[ -f $PCP_BINADM_DIR/pcp-ss ] || _notrun "pcp-ss utility is not installed"
[ -f $PCP_PMDAS_DIR/sockets/pmdasockets ] || _notrun "sockets PMDA not installed"

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!

pmdasockets_install()
{
    # start from known starting points
    cd $PCP_PMDAS_DIR/sockets
    $sudo ./Remove >/dev/null 2>&1

    echo
    echo "=== sockets agent installation ==="
    $sudo ./Install </dev/null >$tmp.out 2>&1
    cat $tmp.out >>$seq_full
    # Check sockets metrics have appeared ... X metrics and Y values
    _filter_pmda_install <$tmp.out \
    | sed \
        -e 's/[0-9][0-9]* warnings, //' \
    | $PCP_AWK_PROG '
/Check network.persocket metrics have appeared/ {
                                          if ($7 >= 50 && $7 <= 99) $7 = "X"
                                          if ($10 >= 0) $10 = "Y"
                                        }
                                        { print }'
}

pmdasockets_remove()
{
    echo
    echo "=== remove sockets agent ==="
    $sudo ./Remove >$tmp.out 2>&1
    _filter_pmda_remove <$tmp.out
}

# real QA test starts here
_prepare_pmda sockets
trap "_cleanup_pmda sockets; exit \$status" 0 1 2 3 15
_stop_auto_restart pmcd

pmdasockets_install
echo

pcp ss > $tmp.out 2>&1
if grep -q LISTEN $tmp.out  # do not show LISTEN state by default
then
    echo Failed LISTEN check
    cat $tmp.out
    status=1
    exit
else
    echo Passed LISTEN check
    cat $tmp.out >> $seq_full
fi

pcp ss -u > $tmp.out 2>&1
if grep -q UNCONN $tmp.out  # do not show UNCONN state by default in UDP mode
then
    echo Failed UDP UNCONN check
    cat $tmp.out
    status=1
    exit
else
    echo Passed UDP UNCONN check
    cat $tmp.out >> $seq_full
fi

pmdasockets_remove

# success, all done
exit
