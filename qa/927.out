QA output created by 927
expression trees ...
pmRegisterDerived: name="event.flags" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[0] event.flags = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-0>...
expr node <addr-0> type=ANON left=<addr-1> right=(nil) save_last=0
expr node <addr-1> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
pmRegisterDerived: name="event.missed" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[1] event.missed = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-2>...
expr node <addr-2> type=ANON left=<addr-3> right=(nil) save_last=0
expr node <addr-3> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
Derived metric initialization from $PCP_DERIVED_CONFIG
pmLoadDerivedConfig("TMP.config")
pmRegisterDerived: name="qa_927.bin_2_5" expr="2 * sample.bin / 5"
derive_lex() -> type=L_INTEGER "2"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_SLASH "/"
derive_lex() -> type=L_INTEGER "5"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[2] qa_927.bin_2_5 = 2 * sample.bin / 5
Derived metric expr dump from <addr-4>...
expr node <addr-4> type=SLASH left=<addr-5> right=<addr-8> save_last=0
expr node <addr-5> type=STAR left=<addr-6> right=<addr-7> save_last=0
expr node <addr-6> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=1
expr node <addr-7> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-8> type=INTEGER left=(nil) right=(nil) save_last=0 [5] primary=1
pmRegisterDerived: name="qa_927.bin_frac" expr="0.4 * sample.bin"
derive_lex() -> type=L_DOUBLE "0.4"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[3] qa_927.bin_frac = 0.4 * sample.bin
Derived metric expr dump from <addr-9>...
expr node <addr-9> type=STAR left=<addr-10> right=<addr-11> save_last=0
expr node <addr-10> type=DOUBLE left=(nil) right=(nil) save_last=0 [0.4] primary=1
expr node <addr-11> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="qa_927.bin_frac2" expr="sample.bin * .4"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_DOUBLE ".4"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[4] qa_927.bin_frac2 = sample.bin * .4
Derived metric expr dump from <addr-12>...
expr node <addr-12> type=STAR left=<addr-13> right=<addr-14> save_last=0
expr node <addr-13> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-14> type=DOUBLE left=(nil) right=(nil) save_last=0 [.4] primary=1
pmRegisterDerived: name="qa_927.rel_lt" expr="sample.long.hundred < 101"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_INTEGER "101"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[5] qa_927.rel_lt = sample.long.hundred < 101
Derived metric expr dump from <addr-15>...
expr node <addr-15> type=LT left=<addr-16> right=<addr-17> save_last=0
expr node <addr-16> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-17> type=INTEGER left=(nil) right=(nil) save_last=0 [101] primary=1
pmRegisterDerived: name="qa_927.rel_leq" expr="43 - (4 * 10 + (sample.ulonglong.hundred <= 100) + 1)"
derive_lex() -> type=L_INTEGER "43"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_INTEGER "4"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_INTEGER "10"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.ulonglong.hundred"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[6] qa_927.rel_leq = 43 - (4 * 10 + (sample.ulonglong.hundred <= 100) + 1)
Derived metric expr dump from <addr-18>...
expr node <addr-18> type=MINUS left=<addr-19> right=<addr-20> save_last=0
expr node <addr-19> type=INTEGER left=(nil) right=(nil) save_last=0 [43] primary=1
expr node <addr-20> type=PLUS left=<addr-21> right=<addr-28> save_last=0
expr node <addr-21> type=PLUS left=<addr-22> right=<addr-25> save_last=0
expr node <addr-22> type=STAR left=<addr-23> right=<addr-24> save_last=0
expr node <addr-23> type=INTEGER left=(nil) right=(nil) save_last=0 [4] primary=1
expr node <addr-24> type=INTEGER left=(nil) right=(nil) save_last=0 [10] primary=1
expr node <addr-25> type=LEQ left=<addr-26> right=<addr-27> save_last=0
expr node <addr-26> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.hundred] primary=1
expr node <addr-27> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-28> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
pmRegisterDerived: name="qa_927.rel_neq" expr="instant(sample.seconds) != 0"
derive_lex() -> type=L_INSTANT "instant"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.seconds"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[7] qa_927.rel_neq = instant(sample.seconds) != 0
Derived metric expr dump from <addr-29>...
expr node <addr-29> type=NEQ left=<addr-30> right=<addr-32> save_last=0
expr node <addr-30> type=INSTANT left=<addr-31> right=(nil) save_last=0
expr node <addr-31> type=NAME left=(nil) right=(nil) save_last=0 [sample.seconds] primary=1
expr node <addr-32> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
pmRegisterDerived: name="qa_927.rel_true" expr="(sample.long.hundred <= 100) + (sample.long.hundred >= 100) - (sample.long.hundred == 100)"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[8] qa_927.rel_true = (sample.long.hundred <= 100) + (sample.long.hundred >= 100) - (sample.long.hundred == 100)
Derived metric expr dump from <addr-33>...
expr node <addr-33> type=MINUS left=<addr-34> right=<addr-41> save_last=0
expr node <addr-34> type=PLUS left=<addr-35> right=<addr-38> save_last=0
expr node <addr-35> type=LEQ left=<addr-36> right=<addr-37> save_last=0
expr node <addr-36> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-37> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-38> type=GEQ left=<addr-39> right=<addr-40> save_last=0
expr node <addr-39> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-40> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-41> type=EQ left=<addr-42> right=<addr-43> save_last=0
expr node <addr-42> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-43> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
pmRegisterDerived: name="qa_927.rel_false" expr="(sample.long.hundred < 100) + (sample.long.hundred > 100) + (sample.long.hundred != 100)"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[9] qa_927.rel_false = (sample.long.hundred < 100) + (sample.long.hundred > 100) + (sample.long.hundred != 100)
Derived metric expr dump from <addr-44>...
expr node <addr-44> type=PLUS left=<addr-45> right=<addr-52> save_last=0
expr node <addr-45> type=PLUS left=<addr-46> right=<addr-49> save_last=0
expr node <addr-46> type=LT left=<addr-47> right=<addr-48> save_last=0
expr node <addr-47> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-48> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-49> type=GT left=<addr-50> right=<addr-51> save_last=0
expr node <addr-50> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-51> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-52> type=NEQ left=<addr-53> right=<addr-54> save_last=0
expr node <addr-53> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-54> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
pmRegisterDerived: name="qa_927.rel_eq" expr="sample.long.hundred + sample.float.million == sample.double.million + sample.ulonglong.hundred"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.float.million"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_NAME "sample.ulonglong.hundred"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[10] qa_927.rel_eq = sample.long.hundred + sample.float.million == sample.double.million + sample.ulonglong.hundred
Derived metric expr dump from <addr-55>...
expr node <addr-55> type=EQ left=<addr-56> right=<addr-59> save_last=0
expr node <addr-56> type=PLUS left=<addr-57> right=<addr-58> save_last=0
expr node <addr-57> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-58> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.million] primary=1
expr node <addr-59> type=PLUS left=<addr-60> right=<addr-61> save_last=0
expr node <addr-60> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-61> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.hundred] primary=1
pmRegisterDerived: name="qa_927.bool.and_true" expr="1 && sample.long.one"
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[11] qa_927.bool.and_true = 1 && sample.long.one
Derived metric expr dump from <addr-62>...
expr node <addr-62> type=AND left=<addr-63> right=<addr-64> save_last=0
expr node <addr-63> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-64> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
pmRegisterDerived: name="qa_927.bool.and_false" expr="sample.double.one && 0"
derive_lex() -> type=L_NAME "sample.double.one"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[12] qa_927.bool.and_false = sample.double.one && 0
Derived metric expr dump from <addr-65>...
expr node <addr-65> type=AND left=<addr-66> right=<addr-67> save_last=0
expr node <addr-66> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.one] primary=1
expr node <addr-67> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
pmRegisterDerived: name="qa_927.bool.or_complex" expr="sample.long.hundred < 100 || sample.long.hundred > 100 || sample.long.hundred != 100 || sample.long.hundred == 100"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[13] qa_927.bool.or_complex = sample.long.hundred < 100 || sample.long.hundred > 100 || sample.long.hundred != 100 || sample.long.hundred == 100
Derived metric expr dump from <addr-68>...
expr node <addr-68> type=OR left=<addr-69> right=<addr-80> save_last=0
expr node <addr-69> type=OR left=<addr-70> right=<addr-77> save_last=0
expr node <addr-70> type=OR left=<addr-71> right=<addr-74> save_last=0
expr node <addr-71> type=LT left=<addr-72> right=<addr-73> save_last=0
expr node <addr-72> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-73> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-74> type=GT left=<addr-75> right=<addr-76> save_last=0
expr node <addr-75> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-76> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-77> type=NEQ left=<addr-78> right=<addr-79> save_last=0
expr node <addr-78> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-79> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-80> type=EQ left=<addr-81> right=<addr-82> save_last=0
expr node <addr-81> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-82> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
__dmopencontext(->ctx 0) called, 14 derived metrics
__dmgetpmid: metric "qa_927.bin_2_5" -> PMID 511.0.3
__dmtraverse: name="qa_927" added "qa_927.bin_2_5"
__dmgetpmid: metric "qa_927.bin_frac" -> PMID 511.0.4
__dmtraverse: name="qa_927" added "qa_927.bin_frac"
__dmgetpmid: metric "qa_927.bin_frac2" -> PMID 511.0.5
__dmtraverse: name="qa_927" added "qa_927.bin_frac2"
__dmgetpmid: metric "qa_927.rel_lt" -> PMID 511.0.6
__dmtraverse: name="qa_927" added "qa_927.rel_lt"
__dmgetpmid: metric "qa_927.rel_leq" -> PMID 511.0.7
__dmtraverse: name="qa_927" added "qa_927.rel_leq"
__dmgetpmid: metric "qa_927.rel_neq" -> PMID 511.0.8
__dmtraverse: name="qa_927" added "qa_927.rel_neq"
__dmgetpmid: metric "qa_927.rel_true" -> PMID 511.0.9
__dmtraverse: name="qa_927" added "qa_927.rel_true"
__dmgetpmid: metric "qa_927.rel_false" -> PMID 511.0.10
__dmtraverse: name="qa_927" added "qa_927.rel_false"
__dmgetpmid: metric "qa_927.rel_eq" -> PMID 511.0.11
__dmtraverse: name="qa_927" added "qa_927.rel_eq"
__dmgetpmid: metric "qa_927.bool.and_true" -> PMID 511.0.12
__dmtraverse: name="qa_927" added "qa_927.bool.and_true"
__dmgetpmid: metric "qa_927.bool.and_false" -> PMID 511.0.13
__dmtraverse: name="qa_927" added "qa_927.bool.and_false"
__dmgetpmid: metric "qa_927.bool.or_complex" -> PMID 511.0.14
__dmtraverse: name="qa_927" added "qa_927.bool.or_complex"
__dmgetpmid: metric "qa_927.bin_2_5" -> PMID 511.0.3
__dmgetpmid: metric "qa_927.bin_frac" -> PMID 511.0.4
__dmgetpmid: metric "qa_927.bin_frac2" -> PMID 511.0.5
__dmgetpmid: metric "qa_927.rel_lt" -> PMID 511.0.6
__dmgetpmid: metric "qa_927.rel_leq" -> PMID 511.0.7
__dmgetpmid: metric "qa_927.rel_neq" -> PMID 511.0.8
__dmgetpmid: metric "qa_927.rel_true" -> PMID 511.0.9
__dmgetpmid: metric "qa_927.rel_false" -> PMID 511.0.10
__dmgetpmid: metric "qa_927.rel_eq" -> PMID 511.0.11
__dmgetpmid: metric "qa_927.bool.and_true" -> PMID 511.0.12
__dmgetpmid: metric "qa_927.bool.and_false" -> PMID 511.0.13
__dmgetpmid: metric "qa_927.bool.or_complex" -> PMID 511.0.14

live metadata ...

qa_927.bin_2_5
    Data Type: double  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

qa_927.bin_frac
    Data Type: double  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

qa_927.bin_frac2
    Data Type: double  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

qa_927.rel_lt
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_leq
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_neq
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_true
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_false
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_eq
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.bool.and_true
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.bool.and_false
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.bool.or_complex
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

live values ...

qa_927.bin_2_5
    inst [100 or "bin-100"] value 40
    inst [200 or "bin-200"] value 80
    inst [300 or "bin-300"] value 120
    inst [400 or "bin-400"] value 160
    inst [500 or "bin-500"] value 200
    inst [600 or "bin-600"] value 240
    inst [700 or "bin-700"] value 280
    inst [800 or "bin-800"] value 320
    inst [900 or "bin-900"] value 360

qa_927.bin_frac
    inst [100 or "bin-100"] value 40
    inst [200 or "bin-200"] value 80
    inst [300 or "bin-300"] value 120
    inst [400 or "bin-400"] value 160
    inst [500 or "bin-500"] value 200
    inst [600 or "bin-600"] value 240
    inst [700 or "bin-700"] value 280
    inst [800 or "bin-800"] value 320
    inst [900 or "bin-900"] value 360

qa_927.bin_frac2
    inst [100 or "bin-100"] value 40
    inst [200 or "bin-200"] value 80
    inst [300 or "bin-300"] value 120
    inst [400 or "bin-400"] value 160
    inst [500 or "bin-500"] value 200
    inst [600 or "bin-600"] value 240
    inst [700 or "bin-700"] value 280
    inst [800 or "bin-800"] value 320
    inst [900 or "bin-900"] value 360

qa_927.rel_lt
    value 1

qa_927.rel_leq
    value 1

qa_927.rel_neq
    value 1

qa_927.rel_true
    value 1

qa_927.rel_false
    value 0

qa_927.rel_eq
    value 1

qa_927.bool.and_true
    value 1

qa_927.bool.and_false
    value 0

qa_927.bool.or_complex
    value 1

archive metadata ...

sample.seconds
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: sec

sample.milliseconds
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: millisec

sample.bin
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

sample.dupnames.two.seconds
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: sec

sample.dupnames.two.bin
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

sample.dupnames.three.bin
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

sample.dupnames.four.bin
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

sample.dupnames.five.bin
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

sample.long.one
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

sample.long.hundred
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

sample.float.million
    Data Type: float  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

sample.double.one
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

sample.double.million
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

sample.ulonglong.hundred
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

pmcd.seqnum
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none

pmcd.pid
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none

pmcd.pmlogger.archive
    Data Type: string  InDom: 2.1 0x800001
    Semantics: discrete  Units: none

pmcd.pmlogger.port
    Data Type: 32-bit unsigned int  InDom: 2.1 0x800001
    Semantics: discrete  Units: none

pmcd.pmlogger.host
    Data Type: string  InDom: 2.1 0x800001
    Semantics: discrete  Units: none

event.flags
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none

event.missed
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
---

qa_927.bin_2_5
    Data Type: double  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

qa_927.bin_frac
    Data Type: double  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

qa_927.bin_frac2
    Data Type: double  InDom: 29.2 0x7400002
    Semantics: instant  Units: none

qa_927.rel_lt
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_leq
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_neq
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_true
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_false
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.rel_eq
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.bool.and_true
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.bool.and_false
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

qa_927.bool.or_complex
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none

archive values ...

qa_927.bin_2_5
    inst [100 or "bin-100"] value 40
    inst [200 or "bin-200"] value 80
    inst [300 or "bin-300"] value 120
    inst [400 or "bin-400"] value 160
    inst [500 or "bin-500"] value 200
    inst [600 or "bin-600"] value 240
    inst [700 or "bin-700"] value 280
    inst [800 or "bin-800"] value 320
    inst [900 or "bin-900"] value 360

qa_927.bin_frac
    inst [100 or "bin-100"] value 40
    inst [200 or "bin-200"] value 80
    inst [300 or "bin-300"] value 120
    inst [400 or "bin-400"] value 160
    inst [500 or "bin-500"] value 200
    inst [600 or "bin-600"] value 240
    inst [700 or "bin-700"] value 280
    inst [800 or "bin-800"] value 320
    inst [900 or "bin-900"] value 360

qa_927.bin_frac2
    inst [100 or "bin-100"] value 40
    inst [200 or "bin-200"] value 80
    inst [300 or "bin-300"] value 120
    inst [400 or "bin-400"] value 160
    inst [500 or "bin-500"] value 200
    inst [600 or "bin-600"] value 240
    inst [700 or "bin-700"] value 280
    inst [800 or "bin-800"] value 320
    inst [900 or "bin-900"] value 360

qa_927.rel_lt
    value 1

qa_927.rel_leq
    value 1

qa_927.rel_neq
    value 1

qa_927.rel_true
    value 1

qa_927.rel_false
    value 0

qa_927.rel_eq
    value 1

qa_927.bool.and_true
    value 1

qa_927.bool.and_false
    value 0

qa_927.bool.or_complex
    value 1

error cases ...
[TMP.config:1] Error: pmRegisterDerived(qa_927.bad_neq, ...) syntax error
 sample.seconds #& 0
                ^   
Illegal character
[TMP.config:2] Error: pmRegisterDerived(qa_927.bad_and, ...) syntax error
 sample.milliseconds > sample.seconds &@ 1>2
                                      ^     
Illegal character
[TMP.config:3] Error: pmRegisterDerived(qa_927.bad_or, ...) syntax error
 sample.milli|seconds
             ^       
Illegal character
Semantic error: derived metric qa_927.bad_non_ctr_dim_right: sample.milliseconds > hinv.physmem: Non-counter and not dimensionless for right operand
Semantic error: derived metric qa_927.bad_non_ctr_dim_left: kernel.all.uptime <= sample.milliseconds: Non-counter and not dimensionless for left operand
Error: qa_927: Unknown metric name
