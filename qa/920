#!/bin/sh
# PCP QA Test No. 920
# pmlogger_check with Martins Innus <minnus@buffalo.edu> style
# multi-level directory structure.
#
# Copyright (c) 2017 Ken McDonell.  All Rights Reserved.
#
# check-group-include: logutil
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_check_job_scheduler

status=1	# failure is the default!
needclean=true
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    if $needclean
    then
	_service pmlogger stop 2>&1 | _filter_pcp_stop
	_restore_config $control
	if [ -f $PCP_SYSCONFIG_DIR/pmlogger_timers ]
	then
	    _restore_config $PCP_SYSCONFIG_DIR/pmlogger_timers
	fi
	needclean=false
	_service pmlogger start 2>&1 | _filter_pcp_start
	_wait_for_pmlogger
	_restore_job_scheduler $tmp.cron $tmp.systemd $sudo
    fi
    cd $here
    $sudo rm -rf $tmp $tmp.* $PCP_ARCHIVE_DIR/$seq
}

_report()
{
    # Note: some versions of ls(1), e.g. OS X, don't report directory
    # names from the command line (so no pmlogger: line below)
    #
    if [ ! -d $PCP_ARCHIVE_DIR/$seq ]
    then
	echo "Arrgh: directory $PCP_ARCHIVE_DIR/$seq not created"
	$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '[P]PID|/[p]mlogger( |$)'
	return
    fi


    cd $PCP_ARCHIVE_DIR
    ls -lR $seq | tee -a $seq_full | $PCP_AWK_PROG '
NF < 4		{ print; next }
		{ print "mode=" $1 " user=" $3 " group=" $4 " name=" $NF }' \
    | sed \
	-e '/^total /d' \
	-e '/name=Latest/d' \
	-e '/name=lock/d' \
	-e 's/[2-9][0-9][0-9][0-9]:$/YYYY:/' \
	-e 's/[2-9][0-9][0-9][0-9]\/[01][0-9]:$/YYYY\/MM:/' \
	-e 's/[2-9][0-9][0-9][0-9]\/[01][0-9]\/[0-3][0-9]:$/YYYY\/MM\/DD:/' \
	-e 's/=[2-9][0-9][0-9][0-9]$/=YYYY/' \
	-e 's/=[0-3][0-9]$/=NN/' \
	-e 's/[2-9][0-9][0-9][0-9][01][0-9][0-3][0-9]/YYYYMMDD/' \
	-e 's/[012][0-9]\.[0-5][0-9]\./HH.MM./' \
	-e 's/\. user=/ user=/' \
    # end
    cd $here
}

_filter_pmlogger_check()
{
    sed \
	-e '/pmlogger_check.service/d' \
	-e '/pmlogger_check.timer/d' \
	-e '/pmlogger_check.path/d' \
    #end
}

control=$PCP_PMLOGGERCONTROL_PATH
[ -f $PCP_PMLOGGERCONTROL_PATH.d/local ] && \
control=$PCP_PMLOGGERCONTROL_PATH.d/local

export PMLOGGER_CHECK_SKIP_LOGCONF=yes

# real QA test starts here
_remove_job_scheduler $tmp.cron $tmp.systemd $sudo

cat <<End-of-File >$tmp.control
# dummy file created by qa/$seq on `date`
# the goal here is to have a non-primary logger that has a deeply
# nested directory structure for the logs
\$version=1.1
LOCALHOSTNAME   n   n   PCP_ARCHIVE_DIR/$seq/myhost/2017/02/12 -c /dev/null -L -l $tmp.log.1
LOCALHOSTNAME	y   n	PCP_ARCHIVE_DIR/$seq/primary	-r -T24h10m -c config.default -v 100Mb -l $tmp.log.2
End-of-File
_save_config $control
$sudo cp $tmp.control $control

if [ -f $PCP_SYSCONFIG_DIR/pmlogger_timers ]
then
    cat <<End-of-File >$tmp.timers
# Installed by qa/$seq on `date`
# ... force -z for pmlogger_daily so no "reexec" thank you
#
PMLOGGER_DAILY_PARAMS=-z
End-of-File
    _save_config $PCP_SYSCONFIG_DIR/pmlogger_timers
    $sudo cp $tmp.timers $PCP_SYSCONFIG_DIR/pmlogger_timers
fi

if ! _service pmlogger restart; then _exit 1; fi \
| _filter_pcp_start

# wait up to 20 seconds for our pmlogger to start
#
i=0
while [ $i -lt 20 ]
do
    if $PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep '/[p]mlogger.* -c /dev/null -L' >/dev/null
    then
	break
    fi
    sleep 1
    i=`expr $i + 1`
done

# pmlogger process has started, give it a chance to create the archive files
#
sleep 1

_report
echo

# wait for primary pmlogger ... our pmlogger may have got started first
# ... without this the _service stop in _cleanup() risks clobbering the
# previous start for the primary pmlogger before it is finished starting
# up, and this may lead to systemd complaints
#
_wait_for_pmlogger || _exit 1

# save pmlogger logs for triage
#
echo "=== pmlogger -c /dev/null -L" >>$seq_full
ls -lR $PCP_ARCHIVE_DIR/$seq/myhost/2017/02/12 >>$seq_full
cat $tmp.log.1 >>$seq_full
echo "=== pmlogger -c config.default" >>$seq_full
cat $tmp.log.2 >>$seq_full

# success, all done
status=0
exit
