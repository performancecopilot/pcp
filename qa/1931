#!/bin/sh
# PCP QA Test No. 1931
# Exercise the BPF PMDA CO-RE execsnoop module - install, remove and values.
#
# Copyright (c) 2022 Sohaib Mohamed.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.bpf

_pmdabpf_check
_pmdabpf_require_kernel_version 5 0
_pmdabpf_require_libbpf_version 0 7

status=1       # failure is the default!
signal=$PCP_BINADM_DIR/pmsignal

cat <<EOF >$tmp.conf
# Installed by PCP QA test $seq on `date`
[execsnoop.so]
enabled=true
command = echo
EOF
_pmdabpf_tryload $tmp.conf

_non_filter()
{
    grep '"0"' > /dev/null && echo -n 'OK'
}

_cleanup()
{
    _pmdabpf_cleanup
    $sudo rm -rf /tmp/qa_execsnoop
}

_prepare_pmda bpf
trap "_cleanup; exit \$status" 0 1 2 3 15
_stop_auto_restart pmcd

# real QA test starts here
_pmdabpf_install $tmp.conf
_pmdabpf_wait_for_metric

# Generate system activity for the CO-RE execsnoop module
/bin/echo hello world
/bin/echo hello PCP
/bin/echo hello test
/bin/echo "zzzzzzzzzzz" > /dev/null &
/bin/touch /tmp/qa_execsnoop
/bin/ls /tmp/qa_execsnoop

echo "=== report metric values for comm ==="
pminfo -dfmtT bpf.execsnoop.comm 2>&1 | tee -a $seq_full \
| _value_filter_exact '"echo"'

echo "=== report metric values for pid ==="
pminfo -dfmtT bpf.execsnoop.pid 2>&1 | tee -a $seq_full \
| _value_filter_nonzero

echo "=== report metric values for ppid ==="
pminfo -dfmtT bpf.execsnoop.ppid 2>&1 | tee -a $seq_full \
| _value_filter_any

echo "=== report metric values for ret ==="
pminfo -dfmtT bpf.execsnoop.ret 2>&1 | tee -a $seq_full \
| _value_filter_exact 0

echo "=== report metric values for args ==="
pminfo -dfmtT bpf.execsnoop.args 2>&1 | tee -a $seq_full \
| _value_filter_exact '"/bin/echo hello PCP"'

echo "=== catch background task ==="
pminfo -dfmtT bpf.execsnoop.args 2>&1 | tee -a $seq_full \
| _value_filter_exact '"/bin/echo zzzzzzzzzzz"'

echo "=== report non-filter value ==="
pminfo -dfmtT bpf.execsnoop.args 2>&1 | tee -a $seq_full \
| _value_filter_exact '"/tmp/qa_execsnoop"'

_pmdabpf_remove

status=0
exit
