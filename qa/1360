#!/bin/sh
# PCP QA Test No. 1360
# based on qa/1696 pmproxy REST API load testing ...
# pmproxy should start w/out valgrind issues when it refuses to
# connect to older versions of a key server.
#
# Copyright (c) 2019 Red Hat.
# Copyright (c) 2021 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.python
. ./common.keys

_check_python36 # needed by ./src/pmproxy_load_test.python
_check_valgrind
_check_series

# need older key server version for this test ...
version=`$key_server --version | sed -E 's/.*v=([0-9]).*/\1/g'`
[ $version -ge 5 ] && \
    _notrun "Key server version $version needs no backward compatibility testing"

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=1	# failure is the default!
username=`id -u -n`
trap "_cleanup; exit \$status" 0 1 2 3 15

# create a pmproxy configuration
cat <<EOF > $tmp.conf
[pmproxy]
pcp.enabled = true
http.enabled = true
[pmseries]
enabled = true
EOF

port=`_find_free_port`
_filter_port()
{
    sed \
	-e "s/ FD $port / FD PORT /g" \
	-e '/PORT ipv6 /d' \
    # end
}

# real QA test starts here
mkdir -p $tmp.pmproxy/pmproxy
export PCP_RUN_DIR=$tmp.pmproxy
export PCP_TMP_DIR=$tmp.pmproxy

$_valgrind_clean_assert pmproxy -f -p $port -U $username -l- -c $tmp.conf >$tmp.valout 2>$tmp.valerr &
pid=$!

echo "valgrind pid: $pid" >>$seq_full
echo "pmproxy port: $port" >>$seq_full

# valgrind takes awhile to fire up
i=0
while [ $i -lt 30 ]
do
    $PCP_BINADM_DIR/telnet-probe -c localhost $port && break
    sleep 1
    i=`expr $i + 1`
done
if $PCP_BINADM_DIR/telnet-probe -c localhost $port
then
    echo "Startup took $i secs" >>$seq_full
else
    echo "Arrgh: valgrind failed start pmproxy and get port $port ready after 30 secs"
    exit
fi

date >>$seq_full
echo "=== pmproxy load test ===" | tee -a $seq_full
./src/pmproxy_load_test.python $port 100

echo "=== check pmproxy is running ==="
pminfo -v -h localhost@localhost:$port hinv.ncpu
if [ $? -eq 0 ]; then
    echo "pmproxy check passed"
else
    echo "pmproxy check failed"
fi

# valgrind takes awhile to shutdown too
pmsignal $pid
pmsleep 3.5

echo "=== valgrind stdout ===" | tee -a $seq_full
cat $tmp.valout | _filter_valgrind

echo "=== valgrind stderr ===" | tee -a $seq_full
cat $tmp.valerr | _filter_pmproxy_log | grep -v "Cannot connect to key server" | _filter_port

# success, all done
status=0
exit
