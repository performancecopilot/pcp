#!/bin/sh
# PCP QA Test No. 1297
# Exercise systemd pmie start/stop (BZ 1650999)
#
# Copyright (c) 2018 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ "$PCPQA_SYSTEMD" = no ] && _notrun "we're not using systemd here"
[ "$PCPQA_SYSTEMD" = yes ] || _notrun "systemctl not installed or not active"
[ -n "$PCP_SYSTEMDUNIT_DIR" ] || _notrun "systemd service files not installed"
[ -f $PCP_SYSTEMDUNIT_DIR/pmie.service ] || _notrun "pmie service not installed"

_cleanup()
{
    cd $here
    if $was_running
    then
	echo "== start primary pmie" >>$seq_full
	_restore_auto_restart pmie
	$sudo systemctl start pmie 2>&1 >>$seq_full
    else
	echo "== stop primary pmie" >>$seq_full
	$sudo systemctl stop pmie 2>&1 >>$seq_full
	_wait_pmie_end
    fi
    $sudo rm -rf $tmp $tmp.*
}

status=1	# failure is the default!
host=`hostname`
trap "_cleanup; exit \$status" 0 1 2 3 15
was_running=false
[ -f $PCP_RUN_DIR/pmie.pid ] && was_running=true

_filter()
{
    sed \
	-e "s,$PCP_LOG_DIR,PCP_LOG_DIR,g" \
	-e "s,$host,HOSTNAME,g" \
    #end
}

if $was_running
then
    _stop_auto_restart pmie
fi

# There may be a primary pmie that was started by QA that is not under
# systemctl control, and if this is the case then systemctl below will
# not stop it ... so use a big hammer first
#
$PCP_PS_PROG $PCP_PS_ALL_FLAGS \
| sed -n -e '/[p]mie .*-P /{
s/^[^ ]*  *//
s/ .*//
p
}' \
| while read pid
do
    $sudo kill -TERM $pid
done

# real QA test starts here
$sudo systemctl stop pmie 2>&1 >>$seq_full
_wait_pmie_end || _exit 1
echo

echo "== confirm no primary pmie running:" | tee -a $seq_full
pcp | grep 'pmie: primary engine' | _filter
echo "== finished" && echo

$sudo systemctl start pmie 2>&1 >>$seq_full
_wait_for_pmie || _exit 1
echo "== confirm primary pmie is running:" | tee -a $seq_full
pcp | grep 'pmie: primary engine' | _filter
echo "== finished" && echo

# success, all done
status=0
exit
