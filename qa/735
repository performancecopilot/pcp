#!/bin/sh
# PCP QA Test No. 735
# Exercise the Linux proc.psinfo.cgroup and proc.id.container metrics
#
# Copyright (c) 2013,2018 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

pid=$$

test $PCP_PLATFORM = linux || _notrun "Test unsupported on $PCP_PLATFORM"
test -f /proc/$pid/cgroup || _notrun "No per-process support for cgroups"

status=1	# failure is the default!
trap "cd $here; rm -rf $tmp.*; exit \$status" 0 1 2 3 15

# real QA test starts here
syscgroups=`cat /proc/$pid/cgroup \
	| sed -e 's/^[0-9][0-9]*://' \
	| tr '\n' ';' \
	| sed -e 's/;$/\n/'`
echo "SYS cgroup list for process $pid is: $syscgroups" >> $seq_full

pminfo -f proc.psinfo.cgroups > $tmp.cgroups
pcpcgroups=`grep "^    inst \[$pid or " $tmp.cgroups \
	| $PCP_AWK_PROG '{ print $NF }' \
	| sed -e 's/^"//' -e 's/"$//'`
echo "PCP cgroup list for process $pid is: $pcpcgroups" >> $seq_full
echo "Extracted from pminfo:" >> $seq_full
cat $tmp.cgroups >> $seq_full

if [ "$pcpcgroups" = "$syscgroups" ]
then
    echo "Control group list for current process checks out"
else
    echo "Mismatch on control group list:"
    echo "PCP cgroups: $pcpcgroups"
    echo "SYS cgroups: $syscgroups"
    # exit with 0 status so it is not marked as Broken in CI, but the output
    # difference will ensure it is marked as Failed
    #
    status=0
    exit
fi

echo
echo "Checking logged control group proc data ..."

root=$tmp.root
export PROC_STATSPATH=$root
export PROC_PAGESIZE=4096
export PROC_THREADS=1
export PROC_HERTZ=100
pmda=$PCP_PMDAS_DIR/proc/pmda_proc.so,proc_init
metrics="proc.psinfo.cgroups proc.id.container"

_filter()
{
    cat >$tmp.out
    grep -v 'inst \[' $tmp.out
    sed -n -e 's/inst \[[0-9][0-9]*/inst [N/p' $tmp.out \
    | LC_COLLATE=POSIX sort
}

for tgz in \
	$here/linux/procpid-4.14.5-root-005.tgz \
	$here/linux/procpid-4.18.13-root-006.tgz
do
    cd $here
    $sudo rm -fr $root
    mkdir $root || _fail "root in use when processing $tgz"
    cd $root
    tar xzf $tgz
    base=`basename $tgz`

    for metric in $metrics
    do
	echo; echo "== Fetching $metric metric - $base"
	pminfo -L -K clear -K add,3,$pmda -f $metric | _filter
    done
done

status=0
exit
