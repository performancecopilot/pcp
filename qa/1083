#!/bin/sh
# PCP QA Test No. 1083
# Check pmcd with systemd - restart, stop and start actions.
#
# Copyright (c) 2017 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ "$PCPQA_SYSTEMD" = no ] && _notrun "we're not using systemd here"
[ -n "$PCP_SYSTEMDUNIT_DIR" ] || _notrun "PCP_SYSTEMDUNIT_DIR not set, so no systemd here"
[ -f $PCP_SYSTEMDUNIT_DIR/pmcd.service ] || _notrun "$PCP_SYSTEMDUNIT_DIR/pmcd.service not found"

_cleanup()
{
    cd $here
    _service pmcd stop >>$seq_full 2>&1
    _restore_auto_restart pmcd
    _service pmcd restart 2>&1 | _filter_pcp_start
    _wait_for_pmcd
    $PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '/[p]mcd|[P]PID' >>$seq_full
    _restore_auto_restart pmlogger
    _service pmlogger restart 2>&1 | _filter_pcp_start
    _wait_for_pmlogger
    $sudo rm -rf $tmp $tmp.*
}

restore_pcpqa_systemd=false

status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_stop_auto_restart pmcd
_stop_auto_restart pmlogger

# get to a known starting point as far as systemd is concerned
#
date >>$seq_full 2>&1
if ! _service pmcd restart >>$seq_full 2>&1; then _exit 1; fi
date >>$seq_full 2>&1
_wait_for_pmcd || _exit 1
date >>$seq_full 2>&1
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '/[p]mcd|[P]PID( |$)' >>$seq_full

# real QA test starts here
if ! _service pmcd stop >>$seq_full 2>&1; then _exit 1; fi
_wait_for_pmcd_stop || _exit 1
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '/[p]mcd|[P]PID( |$)' >>$seq_full

echo "expect failure ..."
pmprobe hinv.ncpu

if ! _service pmcd start >>$seq_full 2>&1; then _exit 1; fi
_wait_for_pmcd || _exit 1
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '/[p]mcd|[P]PID( |$)' >>$seq_full

echo "expect success ..."
pmprobe hinv.ncpu

# success, all done
status=0
exit
