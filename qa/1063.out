QA output created by 1063
pmRegisterDerived: name="event.flags" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[0] event.flags = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-0>...
expr node <addr-0> type=ANON left=<addr-1> right=(nil) save_last=0
expr node <addr-1> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
pmRegisterDerived: name="event.missed" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[1] event.missed = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-2>...
expr node <addr-2> type=ANON left=<addr-3> right=(nil) save_last=0
expr node <addr-3> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
Derived metric initialization from $PCP_DERIVED_CONFIG
pmLoadDerivedConfig("TMP.config")
pmRegisterDerived: name="a.m1" expr="! sample.longlong.ten == 11"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_NAME "sample.longlong.ten"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "11"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[2] a.m1 = ! sample.longlong.ten == 11
Derived metric expr dump from <addr-4>...
expr node <addr-4> type=NOT left=<addr-5> right=(nil) save_last=0
expr node <addr-5> type=EQ left=<addr-6> right=<addr-7> save_last=0
expr node <addr-6> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.ten] primary=1
expr node <addr-7> type=INTEGER left=(nil) right=(nil) save_last=0 [11] primary=1
pmRegisterDerived: name="a.m2" expr="! sample.bin == 200"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "200"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[3] a.m2 = ! sample.bin == 200
Derived metric expr dump from <addr-8>...
expr node <addr-8> type=NOT left=<addr-9> right=(nil) save_last=0
expr node <addr-9> type=EQ left=<addr-10> right=<addr-11> save_last=0
expr node <addr-10> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-11> type=INTEGER left=(nil) right=(nil) save_last=0 [200] primary=1
pmRegisterDerived: name="a.m3" expr="sample.bin != 200"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "200"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[4] a.m3 = sample.bin != 200
Derived metric expr dump from <addr-12>...
expr node <addr-12> type=NEQ left=<addr-13> right=<addr-14> save_last=0
expr node <addr-13> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-14> type=INTEGER left=(nil) right=(nil) save_last=0 [200] primary=1
pmRegisterDerived: name="a.m4" expr="! (sample.bin >= 700 || sample.bin <= 300)"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "700"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_INTEGER "300"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[5] a.m4 = ! (sample.bin >= 700 || sample.bin <= 300)
Derived metric expr dump from <addr-15>...
expr node <addr-15> type=NOT left=<addr-16> right=(nil) save_last=0
expr node <addr-16> type=OR left=<addr-17> right=<addr-20> save_last=0
expr node <addr-17> type=GEQ left=<addr-18> right=<addr-19> save_last=0
expr node <addr-18> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-19> type=INTEGER left=(nil) right=(nil) save_last=0 [700] primary=1
expr node <addr-20> type=LEQ left=<addr-21> right=<addr-22> save_last=0
expr node <addr-21> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-22> type=INTEGER left=(nil) right=(nil) save_last=0 [300] primary=1
pmRegisterDerived: name="a.m5" expr="! sample.bin >= 700 || ! sample.bin <= 300"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_GEQ ">="
derive_lex() -> type=L_INTEGER "700"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_LEQ "<="
derive_lex() -> type=L_INTEGER "300"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[6] a.m5 = ! sample.bin >= 700 || ! sample.bin <= 300
Derived metric expr dump from <addr-23>...
expr node <addr-23> type=OR left=<addr-24> right=<addr-28> save_last=0
expr node <addr-24> type=NOT left=<addr-25> right=(nil) save_last=0
expr node <addr-25> type=GEQ left=<addr-26> right=<addr-27> save_last=0
expr node <addr-26> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-27> type=INTEGER left=(nil) right=(nil) save_last=0 [700] primary=1
expr node <addr-28> type=NOT left=<addr-29> right=(nil) save_last=0
expr node <addr-29> type=LEQ left=<addr-30> right=<addr-31> save_last=0
expr node <addr-30> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-31> type=INTEGER left=(nil) right=(nil) save_last=0 [300] primary=1
pmRegisterDerived: name="a.m6" expr="sample.bin < 700 && sample.bin > 300"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_INTEGER "700"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "300"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[7] a.m6 = sample.bin < 700 && sample.bin > 300
Derived metric expr dump from <addr-32>...
expr node <addr-32> type=AND left=<addr-33> right=<addr-36> save_last=0
expr node <addr-33> type=LT left=<addr-34> right=<addr-35> save_last=0
expr node <addr-34> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-35> type=INTEGER left=(nil) right=(nil) save_last=0 [700] primary=1
expr node <addr-36> type=GT left=<addr-37> right=<addr-38> save_last=0
expr node <addr-37> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-38> type=INTEGER left=(nil) right=(nil) save_last=0 [300] primary=1
pmRegisterDerived: name="a.m7" expr="sample.long.hundred > sample.double.ten"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.double.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[8] a.m7 = sample.long.hundred > sample.double.ten
Derived metric expr dump from <addr-39>...
expr node <addr-39> type=GT left=<addr-40> right=<addr-41> save_last=0
expr node <addr-40> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-41> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.ten] primary=1
pmRegisterDerived: name="a.m8" expr="sample.double.million < sample.float.million"
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_NAME "sample.float.million"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[9] a.m8 = sample.double.million < sample.float.million
Derived metric expr dump from <addr-42>...
expr node <addr-42> type=LT left=<addr-43> right=<addr-44> save_last=0
expr node <addr-43> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-44> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.million] primary=1
pmRegisterDerived: name="a.m9" expr="sample.long.hundred > sample.double.ten || sample.double.million < sample.float.million"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.double.ten"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_NAME "sample.float.million"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[10] a.m9 = sample.long.hundred > sample.double.ten || sample.double.million < sample.float.million
Derived metric expr dump from <addr-45>...
expr node <addr-45> type=OR left=<addr-46> right=<addr-49> save_last=0
expr node <addr-46> type=GT left=<addr-47> right=<addr-48> save_last=0
expr node <addr-47> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-48> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.ten] primary=1
expr node <addr-49> type=LT left=<addr-50> right=<addr-51> save_last=0
expr node <addr-50> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-51> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.million] primary=1
pmRegisterDerived: name="a.m10" expr="! ((sample.long.hundred > sample.double.ten) || (sample.double.million < sample.float.million))"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.double.ten"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_NAME "sample.float.million"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[11] a.m10 = ! ((sample.long.hundred > sample.double.ten) || (sample.double.million < sample.float.million))
Derived metric expr dump from <addr-52>...
expr node <addr-52> type=NOT left=<addr-53> right=(nil) save_last=0
expr node <addr-53> type=OR left=<addr-54> right=<addr-57> save_last=0
expr node <addr-54> type=GT left=<addr-55> right=<addr-56> save_last=0
expr node <addr-55> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-56> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.ten] primary=1
expr node <addr-57> type=LT left=<addr-58> right=<addr-59> save_last=0
expr node <addr-58> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-59> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.million] primary=1
pmRegisterDerived: name="a.m11" expr="! sample.long.hundred > sample.double.ten || sample.double.million < sample.float.million"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_NAME "sample.double.ten"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.double.million"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_NAME "sample.float.million"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[12] a.m11 = ! sample.long.hundred > sample.double.ten || sample.double.million < sample.float.million
Derived metric expr dump from <addr-60>...
expr node <addr-60> type=OR left=<addr-61> right=<addr-65> save_last=0
expr node <addr-61> type=NOT left=<addr-62> right=(nil) save_last=0
expr node <addr-62> type=GT left=<addr-63> right=<addr-64> save_last=0
expr node <addr-63> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-64> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.ten] primary=1
expr node <addr-65> type=LT left=<addr-66> right=<addr-67> save_last=0
expr node <addr-66> type=NAME left=(nil) right=(nil) save_last=0 [sample.double.million] primary=1
expr node <addr-67> type=NAME left=(nil) right=(nil) save_last=0 [sample.float.million] primary=1
pmRegisterDerived: name="a.m12" expr="! sample.long.hundred < sample.long.ten + 89"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_INTEGER "89"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[13] a.m12 = ! sample.long.hundred < sample.long.ten + 89
Derived metric expr dump from <addr-68>...
expr node <addr-68> type=NOT left=<addr-69> right=(nil) save_last=0
expr node <addr-69> type=LT left=<addr-70> right=<addr-71> save_last=0
expr node <addr-70> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-71> type=PLUS left=<addr-72> right=<addr-73> save_last=0
expr node <addr-72> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-73> type=INTEGER left=(nil) right=(nil) save_last=0 [89] primary=1
pmRegisterDerived: name="a.m13" expr="! (sample.long.hundred < (sample.long.ten + 89))"
derive_lex() -> type=L_NOT "!"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_INTEGER "89"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[14] a.m13 = ! (sample.long.hundred < (sample.long.ten + 89))
Derived metric expr dump from <addr-74>...
expr node <addr-74> type=NOT left=<addr-75> right=(nil) save_last=0
expr node <addr-75> type=LT left=<addr-76> right=<addr-77> save_last=0
expr node <addr-76> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-77> type=PLUS left=<addr-78> right=<addr-79> save_last=0
expr node <addr-78> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-79> type=INTEGER left=(nil) right=(nil) save_last=0 [89] primary=1
__dmgetpmid: metric "a.m1" -> PMID 511.0.3
__dmtraverse: name="a" added "a.m1"
__dmgetpmid: metric "a.m2" -> PMID 511.0.4
__dmtraverse: name="a" added "a.m2"
__dmgetpmid: metric "a.m3" -> PMID 511.0.5
__dmtraverse: name="a" added "a.m3"
__dmgetpmid: metric "a.m4" -> PMID 511.0.6
__dmtraverse: name="a" added "a.m4"
__dmgetpmid: metric "a.m5" -> PMID 511.0.7
__dmtraverse: name="a" added "a.m5"
__dmgetpmid: metric "a.m6" -> PMID 511.0.8
__dmtraverse: name="a" added "a.m6"
__dmgetpmid: metric "a.m7" -> PMID 511.0.9
__dmtraverse: name="a" added "a.m7"
__dmgetpmid: metric "a.m8" -> PMID 511.0.10
__dmtraverse: name="a" added "a.m8"
__dmgetpmid: metric "a.m9" -> PMID 511.0.11
__dmtraverse: name="a" added "a.m9"
__dmgetpmid: metric "a.m10" -> PMID 511.0.12
__dmtraverse: name="a" added "a.m10"
__dmgetpmid: metric "a.m11" -> PMID 511.0.13
__dmtraverse: name="a" added "a.m11"
__dmgetpmid: metric "a.m12" -> PMID 511.0.14
__dmtraverse: name="a" added "a.m12"
__dmgetpmid: metric "a.m13" -> PMID 511.0.15
__dmtraverse: name="a" added "a.m13"
__dmgetpmid: metric "a.m1" -> PMID 511.0.3
__dmgetpmid: metric "a.m2" -> PMID 511.0.4
__dmgetpmid: metric "a.m3" -> PMID 511.0.5
__dmgetpmid: metric "a.m4" -> PMID 511.0.6
__dmgetpmid: metric "a.m5" -> PMID 511.0.7
__dmgetpmid: metric "a.m6" -> PMID 511.0.8
__dmgetpmid: metric "a.m7" -> PMID 511.0.9
__dmgetpmid: metric "a.m8" -> PMID 511.0.10
__dmgetpmid: metric "a.m9" -> PMID 511.0.11
__dmgetpmid: metric "a.m10" -> PMID 511.0.12
__dmgetpmid: metric "a.m11" -> PMID 511.0.13
__dmgetpmid: metric "a.m12" -> PMID 511.0.14
__dmgetpmid: metric "a.m13" -> PMID 511.0.15
a.m1 1 1
a.m2 9 1 0 1 1 1 1 1 1 1
a.m3 9 1 0 1 1 1 1 1 1 1
a.m4 9 0 0 0 1 1 1 0 0 0
a.m5 9 1 1 1 1 1 1 1 1 1
a.m6 9 0 0 0 1 1 1 0 0 0
a.m7 1 1
a.m8 1 0
a.m9 1 1
a.m10 1 0
a.m11 1 0
a.m12 1 1
a.m13 1 1
expecting ...
a.m1	 1
a.m2     1 0 1 1 1 1 1 1 1
a.m3     1 0 1 1 1 1 1 1 1
a.m4     0 0 0 1 1 1 0 0 0
a.m5     1 1 1 1 1 1 1 1 1
a.m6     0 0 0 1 1 1 0 0 0
a.m7	 1
a.m8	 0
a.m9	 1
a.m10	 0
a.m11	 0
a.m12	 1
a.m13	 1
