#!/bin/sh
# PCP QA Test No. 999
# Check PMNS integrity after all the PMDA Install/Removes
#
# Copyright (c) 2014 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

status=1	# failure is the default!
trap "cd $here; rm -rf $tmp.*; exit \$status" 0 1 2 3 15

# there are some expected failures and "bad" entries for QA
#
_filter()
{
    grep -v 'No value(s)' \
    | grep -v 'Metric not supported by this version' \
    | sed \
	-e '/^sample.*needprofile/d' \
	-e '/^sample\.bad\./d' \
	-e '/^sampledso\.bad\./d' \
	-e '/^pipe\..*: Not Connected/d' \
	-e '/^cgroup.groups: pmLookupName: Unknown metric name/d' \
	-e '/^proc.id.container: No data available/d' \
	-e '/^proc.id.container: Missing metric value(s)/d' \
	-e '/^proc.psinfo.cgroups: No data available/d' \
	-e '/^proc.psinfo.cgroups: Missing metric value(s)/d' \
	-e '/^elasticsearch\..*: Try again. Information not currently /d' \
	-e '/^apache\..*: Try again. Information not currently available/d' \
	-e '/^oracle\..*: Try again. Information not currently available/d' \
	-e '/^redis\..*: Try again. Information not currently available/d' \
	-e '/^zswap\..*: Try again. Information not currently available/d' \
	-e '/^nginx.*: Try again. Information not currently available/d' \
	-e '/^postgresql\..*: Missing metric value(s)/d' \
	-e '/^hotproc.id.container: No data available/d' \
	-e '/^hotproc.psinfo.cgroups: No data available/d' \
    #end
}

_filter_libvirt()
{
    if _libvirt_is_ok
    then
	cat
    else
	# lines like ...
	# libvirt.dominfo.memory.max: Try again. Information not currently available
	# libvirt.dominfo.memory.boot: IPC protocol failure
	# libvirt: pmLookupDesc: Unknown or illegal metric identifier
	# libvirt.dominfo.os.type: pmLookupDesc: No PMCD agent for domain of request
	sed \
	    -e '/^libvirt\..*: Try again\./d' \
	    -e '/^libvirt\..*: IPC protocol failure/d' \
	    -e '/^libvirt: pmLookupDesc: Unknown or illegal metric/d' \
	    -e '/^libvirt\..*: pmLookupDesc: No PMCD agent for domain/d' \
	# end
    fi
}

# real QA test starts here
pminfo -v 2>&1 | _filter | _filter_libvirt >$tmp.out

if [ -s $tmp.out ]
then
    echo PMNS is BAD
    cat $tmp.out
else
    echo PMNS is GOOD
fi

# success, all done
status=0

exit
