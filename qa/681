#!/bin/sh
# PCP QA Test No. 681
# Exercise __pmProcessExec() and friends from libpcp with valgrind
# ... same test as 036 (that one's without valgrind)
#
# Copyright (c) 2017-2018 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_check_valgrind

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

# filter pid's in lines like ...
# __pmProcessExec: pid=1965 wait_pid=1965
# __pmProcessPipe: map[0 of 1] child pid=1695 fp=0x55eb928fdd20
#
# also the order of stderr is not deterministic ... parent and child
# are both writing here, so sort this bit
#
_filter()
{
    tee -a $seq_full \
    | sed \
	-e 's/pid=[0-9][0-9]*/pid=PID/g' \
	-e 's/fp=[^ ]*/fp=ADDR/' \
	-e "s@$tmp@TMP@g" \
    | $PCP_AWK_PROG '
BEGIN		{ state = 1 }
/^=== filtered/	{ state = 3 }
		{ print >"'$tmp'." state }
/^=== std err/	{ state = 2 }'
    cat $tmp.1
    [ -s $tmp.2 ] && LC_COLLATE=POSIX sort $tmp.2
    [ -s $tmp.3 ] && cat $tmp.3
}

# whitespace in od(1) output is not consistent across platforms
#
_od_filter()
{
    sed \
	-e 's/  */ /g' \
	-e 's/ $//' \
    # end
}

status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

# real QA test starts here
echo "=== success cases ==="
echo "--- echo ---"
_run_valgrind src/exectest -Dexec -- /bin/echo 'blah;trickme' 2>&1 | _filter
echo "--- /bin/sh -c ---"
_run_valgrind src/exectest -Dexec -- /bin/sh -c "echo 'f o o'; kill -TERM \$\$; sleep 1; echo b\\ a\\ r" 2>&1 | _filter
echo "--- pipe in ---"
_run_valgrind src/exectest -Dexec -p -- echo hullo world 2>&1 | _filter
echo "--- pipe out ---"
echo "hello other world" >$tmp.data
_run_valgrind src/exectest -Dexec -P $tmp.data -- od -c 2>&1 | _filter | _od_filter
echo "---  exec and executable not on \$PATH ---"
cat <<'End-of-File' >$tmp.sh
#!/bin/sh
echo "my arg echoer ..."
echo "[0] $0"
i=0
while true
do
    i=`expr $i + 1`
    echo "[$i] $1"
    [ $# -eq 1 ] && break
    shift
done
exit 0
End-of-File
chmod 755 $tmp.sh
_run_valgrind src/exectest -Dexec $tmp.sh 'blah;trickme|foo' cat and dog 2>&1 | _filter
echo "---  popen and executable not on \$PATH ---"
_run_valgrind src/exectest -Dexec -p $tmp.sh 'blah;trickme|foo' cat and dog 2>&1 | _filter

echo
echo "=== error and failure cases ==="
# plug leak in test program, sometimes (probably in child that fails
# execvp()
#
cat <<'End-of-File' >$tmp.suppress
{
   foo
   Memcheck:Leak
   fun:malloc
   fun:main
}
End-of-File
grind_extra="--suppressions=$tmp.suppress"
_run_valgrind src/exectest -Dexec -- /a/b/c -f oo bar 2>&1 | _filter

# success, all done
status=0
exit
