#!/bin/sh
# PCP QA Test No. 1793
# Test pmrep and pcp2xxx labels handling
#
# Copyright (c) 2020 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.python
. ./common.config

which pmrep >/dev/null 2>&1 || _notrun pmrep not installed
$python -c "from collections import OrderedDict" >/dev/null 2>&1  || _notrun no OrderedDict
which pcp2json >/dev/null 2>&1 || _notrun pcp2json not installed

_cleanup()
{
    cd $here
    if $need_restore
    then
	need_restore=false
	$sudo rm -rf $PCP_ETC_DIR/pcp/labels/*
	_restore_config $PCP_ETC_DIR/pcp/labels
	_sighup_pmcd
    fi
    $sudo rm -rf $tmp $tmp.*
}

status=1       # failure is the default!
userid=`id -u`
groupid=`id -g`
hostname=`hostname`
machineid=`_machine_id`
domainname=`_domain_name`
trap "_cleanup; exit \$status" 0 1 2 3 15
need_restore=true

_filter()
{
    sed \
	-e "s/'/\"/g" \
	-e "s/\(\"userid\"\):\"$userid\"/\1:\"USERID\"/g" \
	-e "s/\(\"groupid\"\):\"$groupid\"/\1:\"GROUPID\"/g" \
	-e "s/\(\"hostname\"\):\"$hostname\"/\1:\"HOSTNAME\"/g" \
	-e "s/\(\"machineid\"\):\"$machineid\"/\1:\"MACHINEID\"/g" \
	-e "s/\(\"domainname\"\):\"$domainname\"/\1:\"DOMAINNAME\"/g" \
    | tee -a $seq_full \
    | pmjson \
    | sed -e 's/^[\{\}]$//' -e '/^$/d' -e 's/,$//' | LC_COLLATE=POSIX sort
}

# Take pcp2csv output like ...
# Time,"sample.colour-red","{'domainname':'localdomain';'groupid':'1000';'hostname':'bozo.localdomain';'machineid':'6c78e37f87514105b535e855a43de6ac';'userid':'1000';'agent':'sample';'role':'testing';'model':'RGB';'cluster':'zero'}","sample.colour-green",...
# and turn it something pmjson can grok, like ...
# {'domainname':'localdomain','groupid':'1000','hostname':'bozo.localdomain','machineid':'6c78e37f87514105b535e855a43de6ac','userid':'1000','agent':'sample','role':'testing','model':'RGB','cluster':'zero'} {...
#
_pre_json()
{
    sed -n -e '/{/{
s/^[^{]*{/{/
s/}"[^{]*{/} {/g
s/}"/}/
s/'"'"';'"'"'/'"'"','"'"'/g
p
}'
}

# real QA test starts here
_save_config $PCP_ETC_DIR/pcp/labels
$sudo rm -rf $PCP_ETC_DIR/pcp/labels/*
_sighup_pmcd || _exit 1

mkdir -p $tmp

echo === check pmrep writing an archive with labels | tee -a $seq_full
pmrep -m -t1 -s2 -o archive -F $tmp/pmrep_sample_colour sample.colour >> $seq_full 2>&1
pmdumplog -e $tmp/pmrep_sample_colour | _filter_pmdumplog |\
    grep -e 'Domain.*labels' -e 'Cluster.*labels' -e 'InDom.*labels' | tee -a $seq_full

echo === check pmrep replaying an archive with labels | tee -a $seq_full
pmrep -m -w 1024 -s1 -i "red" -a $tmp/pmrep_sample_colour sample.colour | \
    tee -a $seq_full | grep '{' | $PCP_AWK_PROG '{print $1}' | _filter

echo === check pcp2json replaying an archive with labels | tee -a $seq_full
pcp2json -m -s1 -a $tmp/pmrep_sample_colour sample.colour | \
    tee -a $seq_full | grep '@labels' | $PCP_AWK_PROG '{print $2}' | \
    sed -e s/\'/\"/g -e 's/,$//' -e 's/^"//' -e 's/"$//' | _filter

echo === check pcp2csv replaying an archive with labels | tee -a $seq_full
pcp2csv -m -s1 -a $tmp/pmrep_sample_colour sample.colour \
| tee -a $seq_full \
| _pre_json \
| _filter

echo === check pmrep outputting labels live | tee -a $seq_full
pmrep -m -w 1024 -s1 -i "red" sample.colour \
| tee -a $seq_full \
| grep '{' \
| _filter

echo === check pcp2csv outputting labels live | tee -a $seq_full
pcp2csv -m -s1 sample.colour \
| tee -a $seq_full \
| _pre_json \
| _filter

# success, all done
echo "== done"
status=0
exit
