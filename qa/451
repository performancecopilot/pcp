#!/bin/sh
# PCP QA Test No. 451
# Exercise basic global locking
#
# Copyright (c) 2011 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_get_libpcp_config
$multi_threaded || _notrun "No libpcp threading support"

status=0	# success is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

eval `pmconfig -L lock_asserts`
echo "lock_asserts=$lock_asserts" >>$seq_full

rm -f $seq.out
if $lock_asserts
then
    ln $seq.out.2 $seq.out
else
    ln $seq.out.1 $seq.out
fi

_filter()
{
    if $lock_asserts
    then
	sed \
	    -e '/^exerlock: lock.c:[0-9]*: __pmUnlock: Assertion .* failed/d' \
	    -e '/^exerlock.c:[0-9][0-9]*:/s/:[0-9][0-9]*:/:N:/' \
	    -e 's/ __pmUnlock([^)]*)/ unlock/' \
	    -e 's/ __pmLock([^)]*)/ lock/' \
	    -e '/^Aborted (core dumped)/d' \
	    -e '/^Aborted$/d' \
	| $PCP_AWK_PROG '
$1 == "backtrace:"	{ exit }
$3 == "traceback"	{ exit }
			{ print }'
    else
	sed \
	    -e '/^exerlock.c:[0-9][0-9]*:/s/:[0-9][0-9]*:/:N:/' \
	    -e 's/ __pmUnlock([^)]*)/ unlock/' \
	    -e 's/ __pmLock([^)]*)/ lock/' \
	# end
    fi
}

# real QA test starts here
#
# This test used to assume the big libpcp mutex is recursive ...
# but this is no longer the case (as of Jan 2019), so the nested lock
# tests now fail with "Resource deadlock avoided" (lock-lock) or
# "Operation not permitted" (unlock-unlock) rather than succeeding.
# The test cases with nested unlock or lock operations will return an
# error and the filter is required if libpcp is built with
# BUILD_LOCK_ASSERTS defined.
#
for arg in ilu ilululu illluluuluu ll iluu
do
    echo | tee -a $seq_full
    echo "=== $arg ===" | tee -a $seq_full
    ( sh -c "src/exerlock $arg" 2>&1 ) \
    | tee -a $seq_full \
    | _filter
done

# this calls abort() on the error paths, so we may have core files ...
# this is not cause for failing the test
#
rm -f core

# success, all done
exit
