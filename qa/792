#!/bin/sh
# PCP QA Test No. 792
# test $PCP_DEBUG
#
# Copyright (c) 2015 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

status=1	# failure is the default!
trap "cd $here; rm -rf $tmp.*; exit \$status" 0 1 2 3 15

# Note - pmWhichContext() is called different numbers of times depending
#        on how libpcp was compiled, so strip these lines
#
_filter()
{
    sed \
	-e "s,$PCP_RUN_DIR,PCP_RUN_DIR,g" \
	-e 's,^__pmResult,pmResult,g' \
	-e '/^pmWhichContext()/d' \
	-e '/^_/s/: .*/: .../' \
    | _filter_dumpresult \
    | $PCP_AWK_PROG '
BEGIN		{ skip = 0 }
skip == 0	{ print }
/Usage:/	{ print "..."; skip = 1 }'
}

# real QA test starts here
echo "=== all -D options ==="
pminfo -D profile,fetch,context -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo '=== old-style all $PCP_DEBUG options ==='
n=`pmdbg -D profile,fetch,context | sed -e 's/.* = //'`
PCP_DEBUG=$n pminfo -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo '=== old-style both -D and $PCP_DEBUG options with full overlap ==='
n=`pmdbg -D profile,fetch,context | sed -e 's/.* = //'`
PCP_DEBUG=$n pminfo -D profile,fetch,context -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo '=== old-style both -D and $PCP_DEBUG options with no overlap ==='
n=`pmdbg -D profile,context | sed -e 's/.* = //'`
PCP_DEBUG=$n pminfo -D fetch -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo '=== new-style all $PCP_DEBUG options ==='
PCP_DEBUG="profile,fetch,context" pminfo -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo '=== new-style both -D and $PCP_DEBUG options with full overlap ==='
PCP_DEBUG="profile,fetch,context" pminfo -D profile,fetch,context -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo '=== new-style both -D and $PCP_DEBUG options with no overlap ==='
PCP_DEBUG="profile,context" pminfo -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo "=== and some \$PCP_DEBUG error cases ==="
PCP_DEBUG="profile,no-such-option,context" pminfo -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err
PCP_DEBUG="123.456" pminfo -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

echo
echo "=== and some -D error cases ==="
pminfo -D "profile,no-such-option,context" -v sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err
pminfo -v -D 123.456 sample.long >/dev/null 2>$tmp.err
_filter <$tmp.err

# success, all done
status=0

exit
