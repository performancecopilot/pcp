#!/bin/sh
# PCP QA Test No. 1292
# pmlc - try to reproduce some Coverity-flagged errors
#
# see qa/1293 for the valgrind version of this test
#
# Copyright (c) 2021 Ken McDonell.  All Rights Reserved.
#

if [ $# -eq 0 ]
then
    seq=`basename $0`
    echo "QA output created by $seq"
else
    # use $seq from caller, unless not set
    [ -n "$seq" ] || seq=`basename $0`
    echo "QA output created by `basename $0` $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

do_valgrind=false
if [ "$1" = "--valgrind" ]
then
    _check_valgrind
    do_valgrind=true
fi

_cleanup()
{
    cd $here
    [ -n "$pid" ] && kill -TERM $pid
    wait
    cat $tmp.log \
    | tee -a $seq_full \
    | _filter \
    | sed \
	-e 's/[A-Z][a-z][a-z] [A-Z][a-z][a-z]  *[0-9][0-9]* [0-9][0-9]:[0-9][0-9]:[0-9][0-9] [0-9][0-9][0-9][0-9]$/DATE/' \
	-e 's/[A-Z][a-z][a-z] [A-Z][a-z][a-z]  *[0-9][0-9]* [0-9][0-9]:[0-9][0-9]:[0-9][0-9]/DATE/' \
	-e 's/pmlogger([1-9][0-9]*) Info:/pmlogger(PID) Info:/' \
    # end
    $sudo rm -rf $tmp $tmp.*
}

_filter()
{
    sed \
	-e "/Connected to pmlogger/s/$pid/PID/g" \
	-e '/^Log for pmlogger on /s/ on .*/ on .../' \
	-e '/^preprocessor cmd: /s/: .*/: .../' \
	-e '/^Starting logger for /s/for .*/for .../' \
	-e "s@$tmp@TMP@g" \
	-e "s/$pid$/PID/" \
	-e 's/[A-Z][a-z][a-z] [A-Z][a-z][a-z]  *[0-9][0-9]* [0-9][0-9]:[0-9][0-9]:[0-9][0-9] [0-9][0-9][0-9][0-9]$/DATE/' \
	-e 's/pmlc request from .*\.socket:/pmlc request from ...:/'
    # end
}

status=0	# success is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

# need test pmlogger instance so we can control [access] clause, not rely
# on the primary pmlogger setup
#
cat <<'End-of-File' >$tmp.config
log mandatory on once {
    hinv
    pmcd
}

[access]
allow localhost : all;
End-of-File
$PCP_BINADM_DIR/pmlogger -L -c $tmp.config -l $tmp.log $tmp &
pid=$!
_wait_for_pmlogger $pid $tmp.log || _exit 1

cat <<'End-of-File' >$tmp.in
# expect one instance for each metric
log advisory on once { sample.bin["bin-100"] sample.colour["red"] }
# expect one bin, 3 colours
log advisory on once { sample.bin["bin-100"] sample.colour }
# expect 3 colours, one bin
log advisory on once { sample.colour sample.bin["bin-100"] }
# expect 2 instances
log advisory on once { sample.bin ["bin-100","bin-900"] }
# expect 3 colours, 1 ten
log advisory on once { sample.colour["red" "green"] sample.long.ten }
# expect 1 ten, 3 colours
log advisory on once { sample.long.ten sample.colour["red" "green"] }
# expect 2 instances for each of 4 metrics
log advisory on once { sample.dupnames.five ["bin-100","bin-900"] }
# expect ten, all of bin and 1 of bucket
log advisory on once { sample.long.ten sample.bin sample.bucket ["bin-100"] }
# indom mismatch errors
log advisory on once { sample.dupnames.three ["bin-100"] }
log advisory on once { sample.dupnames.four ["bin-100"] }
log advisory on once { sample.bin sample.bucket sample.long.ten ["bin-100"] }
End-of-File

# real QA test starts here

if $do_valgrind
then
    _run_valgrind pmlc -e -Dappl0 $pid <$tmp.in
else
    pmlc -e -Dappl0 $pid <$tmp.in 2>&1
fi \
| _filter

# success, all done
exit
