#
# Common shell routines for testing pmdabpftrace
#

# get standard environment, filters and checks
. ./common.python

_pmdabpftrace_check()
{
    [ -d /lib/modules/$(uname -r) ] || _notrun "kernel headers for kernel $(uname -r) not found"

    $python -c "from pcp import pmda" >/dev/null 2>&1 || _notrun "python pcp pmda module not installed"
    _check_python36

    which bpftrace > /dev/null || _notrun "bpftrace not installed"
    bpftrace --help 2>&1 | grep '\-f.*json' > /dev/null || _notrun "current bpftrace version doesn't support JSON output, please upgrade"

    [ -f $PCP_PMDAS_DIR/bpftrace/pmdabpftrace.python ] || _notrun "bpftrace PMDA not installed"
}

_pmdabpftrace_install_filter()
{
    sed \
    -e "s/metrics and [0-9]\+ values/metrics and X values/g" \
    #end
}

_pmdabpftrace_install()
{
    # start from known starting points
    cd $PCP_PMDAS_DIR/bpftrace
    $sudo ./Remove >/dev/null 2>&1
    $sudo rm -f $PCP_VAR_DIR/config/pmda/151.*

    # update config
    $sudo cp $PCP_PMDAS_DIR/bpftrace/bpftrace.conf $PCP_PMDAS_DIR/bpftrace/bpftrace.conf.backup
    echo "pmdabpftrace config:" >> $seq_full
    tee -a $seq_full > $tmp.bpftrace.conf
    $sudo cp $tmp.bpftrace.conf $PCP_PMDAS_DIR/bpftrace/bpftrace.conf

    echo
    echo "=== bpftrace agent installation ==="
    $sudo ./Install </dev/null > $tmp.bpftrace.out 2>&1
    cat $tmp.bpftrace.out | _filter_pmda_install | _pmdabpftrace_install_filter

    echo
}

_pmdabpftrace_remove()
{
    cd $PCP_PMDAS_DIR/bpftrace

    echo
    echo "=== remove bpftrace agent ==="
    $sudo ./Remove >$tmp.out 2>&1
    _filter_pmda_remove <$tmp.out
}

_pmdabpftrace_cleanup()
{
    cat $PCP_LOG_DIR/pmcd/bpftrace.log >> $seq_full
    if [ -f $PCP_PMDAS_DIR/bpftrace/bpftrace.conf.backup ]; then
        $sudo mv $PCP_PMDAS_DIR/bpftrace/bpftrace.conf.backup $PCP_PMDAS_DIR/bpftrace/bpftrace.conf
    fi

    # note: _restore_auto_restart pmcd done in _cleanup_pmda()
    _cleanup_pmda bpftrace

    # restore the credentials exchange timeout to the default
    #
    pmstore pmcd.control.creds_timeout 3 >>$seq_full 2>&1
}

# Usage: _pmdabpftrace_wait_for_value [value_regex [timeout_sec]]
#
_pmdabpftrace_wait_for_value()
{
    __value_regex=${2:-".*"}
    __wait_sec=${3:-"10"}
    __wait_iter=`expr $__wait_sec \* 2`
    echo "_pmdabpftrace_wait_for_value $1 $__value_regex $__wait_sec @`date`" >>$seq_full
    for __i in `seq 1 $__wait_iter`
    do
	echo "_pmdabpftrace_wait_for_value: iteration $__i" >>$seq_full
        if pminfo -f $1 | tee -a $seq_full | grep -q "value $__value_regex"; then
	    echo "_pmdabpftrace_wait_for_value success @`date`" >>$seq_full
            echo "found metric $1 with matching value $__value_regex"
            return
        fi
        sleep 0.5
    done

    echo "_pmdabpftrace_wait_for_value failure @`date`" >>$seq_full
    echo "Timeout (${__wait_sec}s) while waiting for metric $1 to match value $__value_regex, script data:"
    pminfo -f $(echo "$1" | sed -r 's/bpftrace\.scripts\.([^.]+)\..*/bpftrace.scripts.\1/')
    # error text above is sufficient to mark the test status as Failed
    # rather than Broken in CI => exit status of 0 is fine
    #
    status=0
    exit $status
}

_pmdabpftrace_generate_openat_syscall_activity()
{
    for __i in `seq 1 10`
    do
        head -c 1 /dev/urandom > /dev/null
        sleep 0.5
    done
}

# $1 is a .bt script ... check the probes it references are really
# defined in the running kernel
#
_pmdabpftrace_check_probes()
{
    if [ ! -f "$1" ]
    then
	echo "_pmdabpfteace_check_probes: Warning: cannot find bpftrace script: $1"
	return
    fi
    $sudo bpftrace -l >$tmp.probes

    # strip the script to get just the list of known probes, then check
    # these against the bpftrace -l output
    #

    rm -f $tmp.missing

    tr ',' '\012' <"$1" \
    | sed -n \
	-e 's/^[ 	]*//' \
	-e 's/^kretprobe/kprobe/' \
	-e '/^hardware:/p' \
	-e '/^kprobe:/p' \
	-e '/^software:/p' \
	-e '/^tracepoint:/p' \
    | while read __probe
    do
	if grep "^$__probe\$" <$tmp.probes >/dev/null
	then
	    :
	else
	    echo "$__probe" >>$tmp.missing
	fi
    done

    if [ -s $tmp.missing ]
    then
	trap "rm -f $tmp.*" 0
	_notrun "Missing bpftrace probe(s): `tr '\012' ' ' <$tmp.missing`"
	# NOTREACHED
    fi
}

# on vm03 the PMDA takes a long time to get into gear, so increase
# the credentials exchange timeout
#
pmstore pmcd.control.creds_timeout 15 >>$seq_full 2>&1
