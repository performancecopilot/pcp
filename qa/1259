#!/bin/sh
# PCP QA Test No. 1259
# Exercise per-context derived metric memory allocation and freeing
# around the creating and destroying of contexts.
# - this is based on qa/246
#
# Copyright (c) 2020 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
if [ $# -eq 0 ]
then
    echo "QA output created by $seq"
else
    echo "QA output created by $seq $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_check_valgrind

# For this test, don't load any global derived metric configs by default.
# So the PCP_DERIVED_CONFIG environment variable is set to an empty string.
export PCP_DERIVED_CONFIG=""

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

_filter()
{
    # __dmclosecontext(->ctx 8) called dm->0x9216d58 3 metrics
    sed \
	-e '/bind metric\[[12]] myname.[bc]/d' \
	-e '/bind metric\[0] myname.a/{
s/bind metric... //
s/$/ .../
}' \
	-e '/^__dmclosecontext/s/ called dm->0x[0-9a-f][0-9a-f]*//' \
	-e '/^pmAddDerived/d' \
	-e "s;$tmp;TMP;" \
    #end
}

# real QA test starts here
cat <<End-of-File >$tmp.config
myname.a = sample.long.one + sample.long.ten + sample.long.hundred + sample.long.million + sample.longlong.one + sample.longlong.ten + sample.longlong.hundred + sample.longlong.million
myname.b = sample.long.one + sample.long.ten + sample.long.hundred + sample.long.million - sample.longlong.one - sample.longlong.ten - sample.longlong.hundred - sample.longlong.million
myname.c= sample.long.one * sample.longlong.one + sample.long.ten * sample.longlong.ten + sample.long.hundred * sample.longlong.hundred + sample.long.million * sample.longlong.million
End-of-File

_run_valgrind src/grind_ctx -D derive -C $tmp.config -s 100 >$tmp.out 2>$tmp.err
echo "--- stdout ---" >>$seq_full
cat $tmp.out | tee -a $seq_full | _filter
echo "--- stderr ---" >>$seq_full
cat $tmp.err | tee -a $seq_full | _filter

# success, all done
exit
