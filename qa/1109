#!/bin/sh
# PCP QA Test No. 1109
# pmlogger memory leak, part of ...
# https://github.com/performancecopilot/pcp/issues/116
#
# See also qa/1159.
#
# Copyright (c) 2017 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_check_valgrind

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

# this is just plain wrong, ...
# Warning: ignored attempt to set SIGKILL handler in sigaction();
# the SIGKILL signal is uncatchable
_filter()
{
    sed \
	-e "s@$tmp@TMP@g" \
	-e '/attempt to set SIGKILL handler in sigaction/d' \
	-e '/SIGKILL signal is uncatchable/d' \
    # end
}

status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

# real QA test starts here
cat <<End-of-File >$tmp.conf
log mandatory on 200 msec {
    containers
    disk
    event
    filesys
    hinv
    ipc
    # kernel
    mmv
    pmcd
    pmda
    quota
    rpc
    swap
    swapdev
    sysfs
    tmpfs
    vfs
}
End-of-File

_run_valgrind pmlogger -r -c $tmp.conf -T 10sec -l $tmp.log -m qa/$seq $tmp \
| _filter
echo

# Counting is real tricky here ... pmlogger may split the one group in
# the config file into multiple pmFetch's, so just count the number of
# pmda.version records in the archive.
#
# Expected number of records is 10sec / 200msec = 50, but given valgrind
# overhead and proc PMDA slowness and possibly lame VM, if we see 10
# pmResults containing pmda.version, that would be good and allow +5
# overshoot.
#
if [ -f $tmp.0 ]
then
    cat $tmp.log >>$seq_full
    pmdumplog $tmp pmda.version \
    | grep 'pmda\.version' \
    | tee -a $seq_full \
    | wc -l \
    | $PCP_AWK_PROG '
BEGIN			{ low = 10; high = 55 }
low <= $1 && $1 <= high	{ print "Found " low "-" high " records in archive"; next }
			{ print "Unexpected " $1 " records in archive" }'
else
    echo "Arrgh, pmlogger never got started ..."
    cat $tmp.log
fi

# success, all done
status=0
exit
