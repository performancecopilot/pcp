#!/bin/sh
# PCP QA Test No. 1254
# per-context derived metrics with pmDupContext() in the mix
# - non-valgrind version, see qa/1256 for the valgrind version
#
# Copyright (c) 2020 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
if [ $# -eq 0 ]
then
    echo "QA output created by $seq"
else
    echo "QA output created by $seq $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

if [ "$1" = "--valgrind" ]
then
    _check_valgrind
fi

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

_filter()
{
    sed \
	-e '/testme\.lights/{
s/  *"red"/ <COLOR>/
s/  *"yellow"/ <COLOR>/
s/  *"green"/ <COLOR>/
}' \
    # end
}

_filter_err()
{
    sed \
	-e '/^pmLoadDerivedConfig/d' \
	-e '/^pmRegisterDerived/d' \
	-e '/^pmAddDerived/d' \
	-e '/^pmGetChildren/d' \
	-e '/^Derived metric initialization from /d' \
	-e '/^__dm/d' \
    # end
}

status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

cat <<End-of-File >$tmp.conf
# these ones will get registered and be in every context
testme.big = sampledso.long.million
testme.lights = sampledso.lights
# this one is bogus
testme.bad = sample.no.such.metric
End-of-File

# real QA test starts here
export PCP_DERIVED_CONFIG=$tmp.conf

if [ "$1" = "--valgrind" ]
then
    _run_valgrind --save-output src/ctx_derive -Dderive -P testme.big testme.lights testme.bad
else
    src/ctx_derive -Dderive -P testme.big testme.lights testme.bad >$tmp.out 2>$tmp.err
fi
_filter_err <$tmp.err
_filter <$tmp.out

# success, all done
status=0
exit
