#!/bin/sh
# PCP QA Test No. 730
# Exercising the Linux cgroups metrics
#
# Copyright (c) 2014 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ $PCP_PLATFORM = linux ] || _notrun "cgroups test, only works with Linux"

status=1	# failure is the default!
trap "cd $here; $sudo rm -rf $tmp.*; exit \$status" 0 1 2 3 15

_filter()
{
    cat >$tmp.out
    grep -v 'inst \[' $tmp.out
    sed -n -e 's/inst \[[0-9][0-9]*/inst [N/p' $tmp.out \
    | LC_COLLATE=POSIX sort
}

# real QA test starts here
root=$tmp.root
export PROC_HERTZ=100
export PROC_STATSPATH=$root
pmda=$PCP_PMDAS_DIR/proc/pmda_proc.so,proc_init
trees=`pminfo cgroup | awk -F. '{ print $2 }' | sort -u`

for tgz in $here/linux/cgroups-*.tgz
do
    cd $here
    $sudo rm -fr $root
    mkdir $root || _fail "root in use when processing $tgz"
    cd $root
    rm -f $tmp.names
    tar xzf $tgz
    base=`basename $tgz`

    echo "== Checking namespace and metric numbering - $base"
    pminfo -L -K clear -K add,3,$pmda cgroup \
    | LC_COLLATE=POSIX sort \
    | tee $tmp.names
    echo "== Checking metric descriptors and values - $base"
    for metric in `cat $tmp.names`
    do
	pminfo -L -K clear -K add,3,$pmda -d -f $metric | _filter
    done
    echo "== Checking on an individual metric fetch - $base"
    pminfo -L -K clear -K add,3,$pmda -f cgroup.blkio.dev.time | _filter

    # takes too long to verify everything, so check just first
    echo $base | grep -q 001 || continue

    for tree in $trees
    do
	name=`pminfo cgroup.$tree | sed 1q`
	echo "== Checking out multi-sample monitor tool - $base"
	pmval -L -K clear -K add,3,$pmda -s 2048 -t 0.00001 $name >/dev/null
	echo "checked cgroup tree $tree via metric $metric" >> $seq_full
    done

    echo && echo "== done" && echo
done

# success, all done
status=0
exit
