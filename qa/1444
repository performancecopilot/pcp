#!/bin/sh
# PCP QA Test No. 1444
# Exercise the BPF PMDA CO-RE statsnoop module - install, remove and values.
#
# Copyright (c) 2022 Sohaib Mohamed.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.bpf

_pmdabpf_check
_pmdabpf_require_kernel_version 5 0
_pmdabpf_require_libbpf_version 0 7

status=1       # failure is the default!
signal=$PCP_BINADM_DIR/pmsignal

cat <<EOF >$tmp.conf
# Installed by PCP QA test $seq on `date`
[statsnoop.so]
enabled=true
EOF
_pmdabpf_tryload $tmp.conf

_cleanup()
{
    _pmdabpf_cleanup
}

_prepare_pmda bpf
trap "_cleanup; exit \$status" 0 1 2 3 15
_stop_auto_restart pmcd

# real QA test starts here
_pmdabpf_install $tmp.conf
_pmdabpf_wait_for_metric

# Generate system activity for the CO-RE statsnoop module;
# Note: pminfo, tee and the shell itself issue stat syscalls
# which can peturb the results here (see comm filter below).
touch /tmp/test-file && stat /tmp/test-file 1> /dev/null

echo "=== report metric values for comm ===" | tee -a $seq_full
pminfo -dfmtT bpf.statsnoop.comm 2>&1 | tee -a $seq_full \
    | sed \
	-e 's/"pmcd"/"stat"/g' \
	-e 's/"sed"/"stat"/g' \
	-e 's/"tee"/"stat"/g' \
	-e 's/"1444"/"stat"/g' \
	-e 's/"pminfo"/"stat"/g' \
	-e 's/".\/pminfo"/"stat"/g' \
	-e 's/"pmprobe"/"stat"/g' \
	-e 's/".\/pmprobe"/"stat"/g' \
| _value_filter_exact '"stat"'

echo "=== report metric values for err ===" | tee -a $seq_full
pminfo -dfmtT bpf.statsnoop.err 2>&1 | tee -a $seq_full \
| _value_filter_any

echo "=== report metric values for path ===" | tee -a $seq_full
pminfo -dfmtT bpf.statsnoop.path 2>&1 | tee -a $seq_full \
| _value_filter_any

echo "=== report metric values for pid ===" | tee -a $seq_full
pminfo -dfmtT bpf.statsnoop.pid 2>&1 | tee -a $seq_full \
| _value_filter_nonzero

echo "=== report metric values for ret ===" | tee -a $seq_full
pminfo -dfmtT bpf.statsnoop.ret 2>&1 | tee -a $seq_full \
| _value_filter_any

_pmdabpf_remove

status=0
exit
